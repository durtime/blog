<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Durtime • Posts by &#34;教程&#34; category</title>
        <link>https://my.durtime.top</link>
        <description>The aroma of black tea no longer exists</description>
        <language>zh-CN</language>
        <pubDate>Thu, 23 Feb 2023 22:40:01 +0800</pubDate>
        <lastBuildDate>Thu, 23 Feb 2023 22:40:01 +0800</lastBuildDate>
        <category>教程</category>
        <category>Hexo</category>
        <category>主題</category>
        <category>butterfly</category>
        <category>Docker</category>
        <category>nginx</category>
        <category>ssh</category>
        <item>
            <guid isPermalink="true">https://my.durtime.top/posts/2bee8b90/</guid>
            <title>Win10 ssh</title>
            <link>https://my.durtime.top/posts/2bee8b90/</link>
            <category>教程</category>
            <category>ssh</category>
            <pubDate>Thu, 23 Feb 2023 22:40:01 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;配置过程&lt;/p&gt;
&lt;h2 id=&#34;1-首先生成密钥对&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-首先生成密钥对&#34;&gt;#&lt;/a&gt; 1. 首先生成密钥对&lt;/h2&gt;
&lt;p&gt;ssh-keygen -t rsa   #-t 表示类型选项，这里采用 rsa 加密算法&lt;/p&gt;
&lt;h2 id=&#34;2-上传公钥&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-上传公钥&#34;&gt;#&lt;/a&gt; 2. 上传公钥&lt;/h2&gt;
&lt;p&gt;ssh-copy-id &lt;a href=&#34;mailto:root@192.168.0.1&#34;&gt;root@192.168.0.1&lt;/a&gt;&lt;br&gt;
 遇到问题&lt;br&gt;
在 windows10 上配置时，会遇到如下错误：&lt;/p&gt;
&lt;p&gt;ssh-copy-id : 无法将 “ssh-copy-id” 项识别为 cmdlet、函数、脚本文件或可运行程序的名称。&lt;/p&gt;
&lt;p&gt;解决方案是在 powershell 中，先执行以下内容：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function ssh-copy-id([string]$userAtMachine, $args)&amp;#123;   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    $publicKey = &amp;quot;$ENV:USERPROFILE&amp;quot; + &amp;quot;/.ssh/id_rsa.pub&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if (!(Test-Path &amp;quot;$publicKey&amp;quot;))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Write-Error &amp;quot;ERROR: failed to open ID file &amp;#x27;$publicKey&amp;#x27;: No such file&amp;quot;            &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;amp; cat &amp;quot;$publicKey&amp;quot; | ssh $args $userAtMachine &amp;quot;umask 077; test -d .ssh || mkdir .ssh ; cat &amp;gt;&amp;gt; .ssh/authorized_keys || exit 1&amp;quot;      &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;3测试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3测试&#34;&gt;#&lt;/a&gt; 3. 测试&lt;/h2&gt;
&lt;p&gt;ssh root@公网 IP&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://my.durtime.top/posts/57ee7c1d/</guid>
            <title>Hexo搭建</title>
            <link>https://my.durtime.top/posts/57ee7c1d/</link>
            <category>教程</category>
            <category>Hexo</category>
            <pubDate>Thu, 23 Feb 2023 22:05:12 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;github-部署&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#github-部署&#34;&gt;#&lt;/a&gt; GitHub 部署&lt;/h1&gt;
&lt;p&gt;npm install hexo-deployer-git --save&lt;/p&gt;
&lt;p&gt;deploy:&lt;br&gt;
type: git&lt;br&gt;
repository: &lt;a href=&#34;mailto:git@github.com&#34;&gt;git@github.com&lt;/a&gt;:cndadi/cndadi.github.io.git  #你的仓库地址&lt;br&gt;
 branch: main&lt;/p&gt;
&lt;p&gt;hexo clean&lt;br&gt;
hexo generate&lt;br&gt;
hexo deploy&lt;/p&gt;
&lt;h1 id=&#34;服务端创建-git-仓库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#服务端创建-git-仓库&#34;&gt;#&lt;/a&gt; 服务端创建 Git 仓库&lt;/h1&gt;
&lt;p&gt;配置免密登录&lt;br&gt;
配置本地客户端与阿里云服务器端的 ssh 免密登录，方便上传仓库时一键式上传。&lt;/p&gt;
&lt;p&gt;在本地客户端生成并上传公共密钥：&lt;/p&gt;
&lt;h2 id=&#34;执行完之后一直回车就行&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#执行完之后一直回车就行&#34;&gt;#&lt;/a&gt; 执行完之后一直回车就行&lt;/h2&gt;
&lt;p&gt;ssh-keygen&lt;/p&gt;
&lt;h2 id=&#34;上传公共密钥到阿里云服务器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#上传公共密钥到阿里云服务器&#34;&gt;#&lt;/a&gt; 上传公共密钥到阿里云服务器&lt;/h2&gt;
&lt;p&gt;ssh-copy-id root@阿里云公网 IP&lt;/p&gt;
&lt;h2 id=&#34;测试是否已免密&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#测试是否已免密&#34;&gt;#&lt;/a&gt; 测试是否已免密&lt;/h2&gt;
&lt;p&gt;ssh root@阿里云公网 IP&lt;/p&gt;
&lt;p&gt;服务器上创建一个 Git 仓库，该仓库中新建一个 post-receive 钩子文件。&lt;/p&gt;
&lt;p&gt;cd ~&lt;br&gt;
git init --bare hexo.git&lt;br&gt;
vi ~/hexo.git/hooks/post-receive&lt;/p&gt;
&lt;h2 id=&#34;填写以下内容其中的work-tree-为-hexo-博客目录&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#填写以下内容其中的work-tree-为-hexo-博客目录&#34;&gt;#&lt;/a&gt; 填写以下内容，其中的–work-tree 为 hexo 博客目录&lt;/h2&gt;
&lt;p&gt;git --work-tree=/data/blog --git-dir=/root/hexo.git checkout -f&lt;/p&gt;
&lt;h2 id=&#34;授予钩子文件可执行权限&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#授予钩子文件可执行权限&#34;&gt;#&lt;/a&gt; 授予钩子文件可执行权限&lt;/h2&gt;
&lt;p&gt;chmod +x ~/hexo.git/hooks/post-receive&lt;br&gt;
chmod -R 777 /data/blog&lt;/p&gt;
&lt;p&gt;至此，Git 仓库创建并配置完成，对应的本地客户端也需要配置一下！&lt;/p&gt;
&lt;p&gt;在本地计算机 hexo 的工程目录下，找到 _config.yml，对 deploy 参数进行修改，如下图所示&lt;/p&gt;
&lt;h1 id=&#34;deployment&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#deployment&#34;&gt;#&lt;/a&gt; Deployment&lt;/h1&gt;
&lt;h2 id=&#34;docs-httpshexoiodocsone-command-deployment&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#docs-httpshexoiodocsone-command-deployment&#34;&gt;#&lt;/a&gt; Docs: &lt;a href=&#34;https://hexo.io/docs/one-command-deployment&#34;&gt;https://hexo.io/docs/one-command-deployment&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;deploy:&lt;br&gt;
type: git&lt;br&gt;
repo: root@公网 IP:/root/hexo.git&lt;br&gt;
branch: master&lt;/p&gt;
&lt;p&gt;在本地计算机安装插件: hexo-deployer-git 和 hexo-server，插件的作用分别是使用 Git 自动部署，和 hexo 本地简单的服务器：&lt;/p&gt;
&lt;p&gt;登录后复制&lt;br&gt;
 npm install hexo-deployer-git --save&lt;br&gt;
npm install hexo-server&lt;/p&gt;
&lt;h2 id=&#34;配置全局变量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置全局变量&#34;&gt;#&lt;/a&gt; 配置全局变量&lt;/h2&gt;
&lt;p&gt;git config --global &lt;a href=&#34;http://user.name&#34;&gt;user.name&lt;/a&gt; “你的账号”&lt;br&gt;
git config --global user.email “你的邮箱”&lt;/p&gt;
&lt;h2 id=&#34;生成发布-hexo-博客&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#生成发布-hexo-博客&#34;&gt;#&lt;/a&gt; 生成发布 Hexo 博客&lt;/h2&gt;
&lt;p&gt;hexo clean&lt;br&gt;
hexo generate&lt;br&gt;
hexo deploy&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://my.durtime.top/posts/2bee8b90/</guid>
            <title>nginx配置</title>
            <link>https://my.durtime.top/posts/2bee8b90/</link>
            <category>教程</category>
            <category>nginx</category>
            <pubDate>Thu, 23 Feb 2023 21:28:25 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;nginxlocation常见配置指令alias-root-proxy_pass-路径问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#nginxlocation常见配置指令alias-root-proxy_pass-路径问题&#34;&gt;#&lt;/a&gt; Nginx——location 常见配置指令，alias、root、proxy_pass 路径问题&lt;/h1&gt;
&lt;p&gt;1.【alias】&lt;/p&gt;
&lt;p&gt;别名配置，用于访问文件系统，在匹配到 location 配置的 URL 路径后，指向【alias】配置的路径。如：&lt;/p&gt;
&lt;p&gt;location /test/&lt;br&gt;
{&lt;br&gt;
alias /home/sftp/img/;&lt;br&gt;
}&lt;br&gt;
location /test/aaa/&lt;br&gt;
{&lt;br&gt;
alias /home/sftp/img/;&lt;br&gt;
}&lt;br&gt;
location /test/aaa/bbb/&lt;br&gt;
{&lt;br&gt;
alias /home/sftp/img/;&lt;br&gt;
}&lt;br&gt;
 即：请求 /test/1.jpg、/test/aaa/1.jpg、/test/aaa/bbb/1.jpg（省略了协议与域名），将会返回文件 /home/sftp/img/1.jpg。&lt;/p&gt;
&lt;p&gt;注意 alias 后面有没有 “/” 要和 location 后面 “/” 保持一致，否则找不到资源文件&lt;/p&gt;
&lt;p&gt;2.【root】&lt;/p&gt;
&lt;p&gt;根路径配置，用于访问文件系统，在匹配到 location 配置的 URL 路径后，指向【root】配置的路径，并把 location 配置路径附加到其后。如：&lt;/p&gt;
&lt;p&gt;location /test/&lt;br&gt;
{&lt;br&gt;
root /home/sftp/img/;&lt;br&gt;
}&lt;br&gt;
 即：请求 /test/1.jpg（省略了协议与域名），将会返回文件 /home/sftp/img/test/1.jpg，相较于 alias，使用 root 会把 /test/ 附加到根目录之后。&lt;/p&gt;
&lt;p&gt;3.【proxy_pass】&lt;/p&gt;
&lt;p&gt;反向代理配置，用于代理请求，适用于前后端负载分离或多台机器、服务器负载分离的场景，在匹配到 location 配置的 URL 路径后，转发请求到【proxy_pass】配置的 URL，是否会附加 location 配置路径与【proxy_pass】配置的路径后是否有 &amp;quot;/“有关，有”/&amp;quot; 则不附加，proxy_pass 带 “/” 类似于 alias 如：&lt;/p&gt;
&lt;p&gt;location /test/&lt;br&gt;
{&lt;br&gt;
proxy_pass &lt;a href=&#34;http://127.0.0.1:8080/&#34;&gt;http://127.0.0.1:8080/&lt;/a&gt;;&lt;br&gt;
}&lt;br&gt;
location /test/aaa/&lt;br&gt;
{&lt;br&gt;
proxy_pass &lt;a href=&#34;http://127.0.0.1:8080/&#34;&gt;http://127.0.0.1:8080/&lt;/a&gt;;&lt;br&gt;
}&lt;br&gt;
location /test/aaa/bbb/&lt;br&gt;
{&lt;br&gt;
proxy_pass &lt;a href=&#34;http://127.0.0.1:8080/&#34;&gt;http://127.0.0.1:8080/&lt;/a&gt;;&lt;br&gt;
}&lt;br&gt;
 在 tomcat 的 webapp/ROOT/ 放一个 1.png 图片&lt;/p&gt;
&lt;p&gt;即：请求 /test/1.jpg、/test/aaa/1.jpg、/test/aaa/bbb/1.jpg（省略了协议与域名），将会被 nginx 转发请求到&lt;a href=&#34;http://127.0.0.1:8080/1.jpg%EF%BC%88%E6%9C%AA%E9%99%84%E5%8A%A0/test/%E5%92%8C/test%E5%AD%90%E7%9B%AE%E5%BD%95%E8%B7%AF%E5%BE%84%EF%BC%89%E3%80%82&#34;&gt; http://127.0.0.1:8080/1.jpg（未附加 /test/ 和 /test 子目录路径）。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;proxy_pass 不带 “/” 类似于 root 如：&lt;/p&gt;
&lt;p&gt;location /test&lt;br&gt;
{&lt;br&gt;
proxy_pass &lt;a href=&#34;http://127.0.0.1:8080&#34;&gt;http://127.0.0.1:8080&lt;/a&gt;;&lt;br&gt;
}&lt;br&gt;
location /test/aaa&lt;br&gt;
{&lt;br&gt;
proxy_pass &lt;a href=&#34;http://127.0.0.1:8080&#34;&gt;http://127.0.0.1:8080&lt;/a&gt;;&lt;br&gt;
}&lt;br&gt;
location /test/aaa/bbb&lt;br&gt;
{&lt;br&gt;
proxy_pass &lt;a href=&#34;http://127.0.0.1:8080&#34;&gt;http://127.0.0.1:8080&lt;/a&gt;;&lt;br&gt;
}&lt;br&gt;
 需要在 tomcat webapp/ROOT/ 创建 aaa/bbb 目录 之后把 1.png 方式 aaa 和 bbb 目录中&lt;/p&gt;
&lt;p&gt;即：请求 /test/1.jpg，/test/aaa/1.jpg，/test/aaa/bbb/1.jpg（省略了协议与域名），将会被 nginx 转发请求到&lt;a href=&#34;http://127.0.0.1:8080/test/1.jpg,http://127.0.0.1:8080/test/aaa/1.jpg,http://127.0.0.1:8080/test/aaa/bbb/1.jpg%EF%BC%88%E9%99%84%E5%8A%A0/test/%E4%BB%A5%E5%8F%8A%E5%AD%90%E7%9B%AE%E5%BD%95%E8%B7%AF%E5%BE%84%EF%BC%89%E3%80%82&#34;&gt; http://127.0.0.1:8080/test/1.jpg,http://127.0.0.1:8080/test/aaa/1.jpg,http://127.0.0.1:8080/test/aaa/bbb/1.jpg（附加 /test/ 以及子目录路径）。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下特殊 是 proxy_pass &lt;a href=&#34;http://127.0.0.1:8080/img&#34;&gt;http://127.0.0.1:8080/img&lt;/a&gt;;  带 img 目录的情况&lt;/p&gt;
&lt;p&gt;location /test 不能加 “/” 如果加了，那么这个 proxy_pass &lt;a href=&#34;http://127.0.0.1:8080/img;%E4%B9%9F%E5%BE%97%E5%8A%A0proxy_pass&#34;&gt;http://127.0.0.1:8080/img; 也得加 proxy_pass&lt;/a&gt; &lt;a href=&#34;http://127.0.0.1:8080/img/&#34;&gt;http://127.0.0.1:8080/img/&lt;/a&gt;;   否则&lt;a href=&#34;http://127.0.0.1:8080/img1.png&#34;&gt; http://127.0.0.1:8080/img1.png&lt;/a&gt;&lt;br&gt;
{&lt;br&gt;
proxy_pass &lt;a href=&#34;http://127.0.0.1:8080/img&#34;&gt;http://127.0.0.1:8080/img&lt;/a&gt;;    效果一样&lt;br&gt;
 proxy_pass &lt;a href=&#34;http://127.0.0.1:8080/img/&#34;&gt;http://127.0.0.1:8080/img/&lt;/a&gt;;&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;location /test/aaaa&lt;br&gt;
{&lt;br&gt;
proxy_pass &lt;a href=&#34;http://127.0.0.1:8080/img&#34;&gt;http://127.0.0.1:8080/img&lt;/a&gt;;   效果一样，和 y 一开始说 proxy_pass 末尾加不加 “/” 行为不一样了&lt;br&gt;
 proxy_pass &lt;a href=&#34;http://127.0.0.1:8080/img/&#34;&gt;http://127.0.0.1:8080/img/&lt;/a&gt;;&lt;br&gt;
}&lt;br&gt;
 即：请求 /test/1.jpg、/test/aaa/1.jpg（省略了协议与域名），将会被 nginx 转发请求到&lt;a href=&#34;http://127.0.0.1:8080/img/1.jpg%EF%BC%88%E6%9C%AA%E9%99%84%E5%8A%A0/test/%E5%92%8C%E5%AD%90%E7%9B%AE%E5%BD%95%E8%B7%AF%E5%BE%84%EF%BC%89%E3%80%82&#34;&gt; http://127.0.0.1:8080/img/1.jpg（未附加 /test/ 和子目录路径）。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;匹配规则：&lt;/p&gt;
&lt;p&gt;location 语法&lt;/p&gt;
&lt;p …=&#34;&#34;&gt;location [=|&lt;sub&gt;|&lt;/sub&gt;*|^~] /uri/&lt;/p&gt;
&lt;p&gt;= 开头表示精确匹配  此时和 location 中的 root 没关系了。至于 location 外面的 root 才能影响 = 的配置路径&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;^~ 开头表示 uri 以某个常规字符串开头，理解为匹配 url 路径即可。nginx 不对 url 做编码，因此请求为 /static/20%/aa，可以被规则 ^~ /static//aa 匹配到（注意是空格）。&lt;/dt&gt;
&lt;dd&gt;开头表示区分大小写的正则匹配&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;~* 开头表示不区分大小写的正则匹配&lt;/p&gt;
&lt;p&gt;!&lt;sub&gt; 和！&lt;/sub&gt;* 分别为区分大小写不匹配及不区分大小写不匹配 的正则&lt;/p&gt;
&lt;p&gt;/ 通用匹配，任何请求都会匹配到。&lt;/p&gt;
&lt;p&gt;第一：一般匹配和精准匹配&lt;/p&gt;
&lt;p&gt;1、精准匹配和一般匹配，uri 后面不带 “/” 匹配&lt;/p&gt;
&lt;p&gt;如图：&lt;/p&gt;
&lt;p&gt;请求 URL：&lt;a href=&#34;http://192.168.60.106/zg/&#34;&gt;http://192.168.60.106/zg/&lt;/a&gt;  访问时匹配的是：/zg&lt;/p&gt;
&lt;p&gt;2、精准匹配和一般匹配，uri 前面和后面都不带 “/”&lt;/p&gt;
&lt;p&gt;如图：&lt;/p&gt;
&lt;p&gt;请求 URL：&lt;a href=&#34;http://192.168.60.106/zg/&#34;&gt;http://192.168.60.106/zg/&lt;/a&gt; 访问时匹配的是：= zg&lt;/p&gt;
&lt;p&gt;3、精准匹配和一般匹配，uri 带 &amp;quot;/“和不带”/&amp;quot; 匹配&lt;/p&gt;
&lt;p&gt;如图：&lt;/p&gt;
&lt;p&gt;请求 URL：&lt;a href=&#34;http://192.168.60.106/zg/&#34;&gt;http://192.168.60.106/zg/&lt;/a&gt; 访问时匹配的是：/zg/ 顺序换也是一样&lt;/p&gt;
&lt;p&gt;综上所述：路径相同时的精准匹配优先，必须是满足 /uri/ 或者 uri，要么 uri 两边都加 /，要么 uri 两边都不加斜杆的情况&lt;/p&gt;
&lt;p&gt;4、精准匹配 就是访问路径和 location 后面的完全一样 包括（前后的 &amp;quot;/&amp;quot;）&lt;/p&gt;
&lt;p&gt;server {&lt;br&gt;
listen       80;&lt;br&gt;
server_name  localhost;&lt;br&gt;
root /opt/wubo; 起作用 全局&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;     index 1.html; 起作用    全局
    location = /jetto &amp;#123;  

            root和alias此时不起作用；

            index index.html;也不起作用;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;正则&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    location ~ /jetto/.*/\.html &amp;#123;  

            root和alias此时不起作用；

            index index.html;也不起作用;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;正则&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;location  ~ /wubo/(.*\.mp4) &amp;#123;

        root和alias此时起作用；

        alias video/mp4/$1;
        #echo_sleep 4;
        #echo &amp;quot;2222&amp;quot;;
        #alias video/mp4;
        #mp4;
        #index wubo.mp4;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;正则&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  location ~ /jetto &amp;#123;  

            root和alias此时起作用；

            index index.html;也起作用;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;访问路径：&lt;a href=&#34;http://ip&#34;&gt;http://ip&lt;/a&gt;:port/jetto    本地真实路径：/opt/wubo/jetto  如果没有上面红色部分默认是 /opt/wubo/html/jetto&lt;/p&gt;
&lt;p&gt;5、通用匹配 以最长 uri 匹配优先&lt;/p&gt;
&lt;p&gt;server {&lt;br&gt;
listen       80;&lt;br&gt;
server_name  localhost;&lt;br&gt;
root /opt/wubo; 起作用 全局&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;     index 1.html; 起作用    全局
    location  /jetto &amp;#123;  

        #root alias index起作用，此时root alias的路径想对与全局的相对路径;index 会覆盖全局 index 的默认值
        #root  /opt/wubo/html;  # 本地真实路径/opt/wubo/html/jetto
        #root  html;           #本地真实路径/opt/wubo/html/jetto
        #root  /opt/wubo/jettopro;   #本地真实路径/opt/wubo/jettopro/jetto
        #root   jettopro;            #本地真实路径/opt/wubo/jettopro/jetto
        #alias  /opt/wubo/jettoapi;   #本地真实路径/opt/wubo/jettoapi
        alias   jettoapi;            #本地真实路径/opt/wubo/jettoapi 
        index index.html jwplayer.html; 
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;访问路径：&lt;a href=&#34;http://ip&#34;&gt;http://ip&lt;/a&gt;:port/jetto    本地真实路径：/opt/wubo/jetto/1.html  如果没有上面红色部分默认是 /opt/wubo/html/jetto/index.html&lt;/p&gt;
&lt;p&gt;第二：^~ 开头的非正则匹配和一般匹配&lt;/p&gt;
&lt;p&gt;^~ 代表非正则匹配，非正则，不需要继续正则匹配。&lt;/p&gt;
&lt;p&gt;^~&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;~: 如果这个匹配使用&lt;/sup&gt;〜前缀，搜索停止。这个前缀官网和网上都说得很含糊，加上这个前缀，是会停止搜索正则匹配，但是对一般匹配是不会停止的，也就是说还是可以匹配到一般匹配的。&lt;/p&gt;
&lt;p&gt;请求 url： &lt;a href=&#34;http://ip&#34;&gt;http://ip&lt;/a&gt;:port/images/aa/test.jpg，匹配结果：/images/aa/&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ip&#34;&gt;http://ip&lt;/a&gt;:port/api/                                     匹配结果：/jettoapi/index.html&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ip&#34;&gt;http://ip&lt;/a&gt;:port/api/wubo                                     匹配结果：/jettoapi/index.html&lt;/p&gt;
&lt;p&gt;意思就是说 ^~ 的作用对一般匹配不会停止，对正则匹配会停止正则匹配是： ~&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;7、^~ 开头的非正则匹配和正则匹配&lt;/dt&gt;
&lt;dd&gt;开头表示区分大小写的正则匹配&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;如图：&lt;/p&gt;
&lt;p&gt;请求 url： &lt;a href=&#34;http://192.168.60.106/images/aa/test.jpg%EF%BC%8C%E5%8C%B9%E9%85%8D%E7%BB%93%E6%9E%9C%EF%BC%9A%5E~/images/&#34;&gt;http://192.168.60.106/images/aa/test.jpg，匹配结果：^~/images/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;location /api {&lt;br&gt;
alias   jettoapi;            #/opt/wubo/jettoapi&lt;br&gt;
index 1.html;&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;访问路径：&lt;a href=&#34;http://ip&#34;&gt;http://ip&lt;/a&gt;:port/api/wubo   本地路径：/opt/wubo/jettoapi/wubo/1.html&lt;/p&gt;
&lt;p&gt;location /api/wubo {&lt;br&gt;
alias   jettoapi;            #/opt/wubo/jettoapi&lt;br&gt;
index 1.html;&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;访问路径：&lt;a href=&#34;http://ip&#34;&gt;http://ip&lt;/a&gt;:port/api/wubo   本地路径：/opt/wubo/jettoapi/1.html&lt;/p&gt;
&lt;p&gt;访问路径和 location 中的路径完全匹配的话 就不需要在本地真实路径下有对应的访问路径，如果 location 的路径只是访问路径中一部分，则需要在本地路径有对应访问中的路径&lt;/p&gt;
&lt;p&gt;8、严格精准匹配和正则匹配&lt;/p&gt;
&lt;p&gt;如图：&lt;/p&gt;
&lt;p&gt;严格精准匹配，如果被严格精准匹配到了，则不会继续搜索正则匹配&lt;/p&gt;
&lt;p&gt;如果&lt;a href=&#34;http://192.168.60.106&#34;&gt; http://192.168.60.106&lt;/a&gt;, 这个就严格精准匹配到了 /, 则不会继续匹配～.html$&lt;/p&gt;
&lt;p&gt;如果：&lt;a href=&#34;http://192.168.60.106/index.html%EF%BC%8C%E5%88%99%E4%BC%9A%E8%A2%AB/&#34;&gt;http://192.168.60.106/index.html，则会被 /&lt;/a&gt; 匹配到，但不是严格精准匹配，则会继续搜索正则匹配&lt;/p&gt;
&lt;p&gt;9、正则匹配规则&lt;/p&gt;
&lt;p&gt;都是正则 uri 的情况下，匹配是按照编辑顺序的&lt;/p&gt;
&lt;p&gt;如图&lt;/p&gt;
&lt;p&gt;请求 URL：&lt;a href=&#34;http://192.168.60.106/prefix/index.html%EF%BC%8C%E4%BC%9A%E4%BC%98%E5%85%88%E5%8C%B9%E9%85%8D%E5%89%8D%E9%9D%A2%E5%AE%9A%E4%B9%89%E7%9A%84location%E3%80%82&#34;&gt;http://192.168.60.106/prefix/index.html，会优先匹配前面定义的 location。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;10、@开头的 uri&lt;/p&gt;
&lt;p&gt;如图：&lt;/p&gt;
&lt;p&gt;@开头的，如果请求的 URI 存在，则本 nginx 返回对应的页面；如果不存在，&lt;a href=&#34;http://xn--baidu-ck2hx5qkfy26l4ku3qtkv9d.com&#34;&gt;则把请求代理到 baidu.com&lt;/a&gt; 上去做个弥补，其实就是做了一个容错，把找不到的 url 全部转发到 fallback 的反向代理服务器去。&lt;/p&gt;
&lt;p&gt;最后总结：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;先判断精准命中，如果命中，立即返回结果并结束解析过程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;判断普通命中，如果有多个命中，记录下来最长的命中结果&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;3、如果是 ^~ 开头的命中，则不会继续搜索正则命中，但是会继续搜索一般命中&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;继续判断正则表达式的解析结果，按配置里的正则表达式顺序为准，由上到下开始匹配，一旦匹配成功立刻返回结果，并结束解析过程。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;延伸分析：a. 普通命中：顺序无所谓，是因为按命中长短来确定的   b. 正则命中：顺序有所谓，因为是从前往后命中的&lt;/p&gt;
&lt;p&gt;注意：当和正则一起使用寻找目录的时候，以下一定是配套的使用。A 相当于定义局部资源目录，B 相当于在 A 定义好的资源目录里面寻找资源&lt;/p&gt;
&lt;p&gt;C 是在全局定义一个资源目录&lt;/p&gt;
&lt;p&gt;A： location /wubo {&lt;br&gt;
alias   video/mp4;           #/opt/wubo/video/mp4&lt;br&gt;
}&lt;br&gt;
B：  location  ~ /wubo/.mp4$ {&lt;br&gt;
mp4;&lt;br&gt;
#limit_conn addr 20;&lt;br&gt;
#limit_rate 2000k;&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;访问：&lt;a href=&#34;http://ip&#34;&gt;http://ip&lt;/a&gt;:port/wubo/wubo.mp4&lt;/p&gt;
&lt;p&gt;server： root  /opt/wubo/video/mp4;&lt;/p&gt;
&lt;p&gt;C：location  ~ .mp4$ {&lt;br&gt;
mp4;&lt;br&gt;
#limit_conn addr 20;&lt;br&gt;
#limit_rate 2000k;&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;访问：&lt;a href=&#34;http://ip&#34;&gt;http://ip&lt;/a&gt;:port/wubo.mp4&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/shangrila_kun/article/details/89643964&#34;&gt;https://blog.csdn.net/shangrila_kun/article/details/89643964&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nginx 是什么&lt;/p&gt;
&lt;p&gt;Nginx（发音同 engine x）是一个异步框架的 Web 服务器，也可以用作反向代理，负载平衡器 和 HTTP 缓存。&lt;br&gt;
也有人这么解释&lt;br&gt;
 nginx 是一款自由的、开源的、高性能的 HTTP 服务器和反向代理服务器；&lt;br&gt;
同时也是一个 IMAP、POP3、SMTP 代理服务器；&lt;br&gt;
nginx 可以作为一个 HTTP 服务器进行网站的发布处理，&lt;br&gt;
另外 nginx 可以作为反向代理进行负载均衡的实现。&lt;br&gt;
nginx.conf 的目录结构&lt;br&gt;
 nginx.conf 的目录结构&lt;br&gt;
整个 conf 文件分为 ** 全局块、events 块、http 块、server 块、location 块 **。每个块有每个块的作用域，越外层的块作用域就包含内部块的作用域，如全局块作用域就包含 events 块、http 块、server 块和 location 块&lt;/p&gt;
&lt;p&gt;#全局块&lt;/p&gt;
&lt;p&gt;event {              #events 块&lt;br&gt;
…&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;http {               #http 块&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server&amp;#123;         #server块
    ...         #server全局块

    location&amp;#123;   #location块
        ...
    &amp;#125;

    location&amp;#123;   #location块
        ...
    &amp;#125;
&amp;#125;

server&amp;#123;         #server块
    ...
&amp;#125;
...             #http全局块
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;http 块&lt;br&gt;
 http 块是 Nginx 服务器配置中的重要部分，代理、缓存和日志定义等绝大多数的功能和第三方模块的配置都可以放在这模块中。作用包括：文件引入、MIME-Type 定义、日志自定义、是否使用 sendfile 传输文件、连接超时时间、单连接请求数上限等。&lt;/p&gt;
&lt;p&gt;server 块&lt;br&gt;
 server 块，虚拟主机（虚拟服务器）。作用：使得 Nginx 服务器可以在同一台服务器上至运行一组 Nginx 进程，就可以运行多个网站。&lt;/p&gt;
&lt;p&gt;location 块&lt;br&gt;
 location 块是 server 块的一个指令。作用：基于 Nginx 服务器接收到的请求字符串，虚拟主机名称（ip，域名）、url 匹配，对特定请求进行处理。&lt;/p&gt;
&lt;p&gt;location 说明&lt;br&gt;
 location 语法&lt;br&gt;
 location [=|&lt;sub&gt;|&lt;/sub&gt;*|^~|@] /uri/ &lt;ruby&gt; … } ，意思是可以以 “=” 或 “ ~* ” 或 “ ~ ” 或 “ &lt;rp&gt;【&lt;/rp&gt;&lt;rt&gt;~ ” 或 “@” 符号为前缀，
当然也可以没有前缀（因为 [A] 是表示可选的 A ； A|B 表示 A 和 B 选一个），紧接着是 /uri/ ，
再接着是 {…&lt;/rt&gt;&lt;rp&gt;】&lt;/rp&gt;&lt;/ruby&gt; 指令块，整个意思是对于满足这样条件的 /uri/ 适用指令块 {…} 的指令。&lt;/p&gt;
&lt;p&gt;location 的分类&lt;br&gt;
 location 分为两类，一类为普通 location，一类为正则 location。&lt;/p&gt;
&lt;p&gt;多个 location 场景下的 location 匹配&lt;br&gt;
 Nginx 的 location 匹配规则是：“正则 location” 让步 “普通 location” 的严格精确匹配结果；但覆盖 “普通 location ” 的最大前缀匹配结果。&lt;/p&gt;
&lt;p&gt;例子 1 先普通 location，再正则 location 匹配&lt;/p&gt;
&lt;p&gt;server {&lt;br&gt;
listen       9090;&lt;br&gt;
server_name  localhost;&lt;br&gt;
location / {&lt;br&gt;
root   html;&lt;br&gt;
index  index.html index.htm;&lt;br&gt;
deny all;&lt;br&gt;
}&lt;br&gt;
location ~ .html$ {&lt;br&gt;
allow all;&lt;br&gt;
}&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;例子 2 普通 location 的 “隐式” 严格匹配&lt;/p&gt;
&lt;p&gt;// 在例子 1 的基础上增加精确匹配&lt;br&gt;
 server {&lt;br&gt;
listen       9090;&lt;br&gt;
server_name  localhost;&lt;br&gt;
location /exact/match.html {&lt;br&gt;
allow all;&lt;br&gt;
}&lt;br&gt;
location / {&lt;br&gt;
root   html;&lt;br&gt;
index  index.html index.htm;&lt;br&gt;
deny all;&lt;br&gt;
}&lt;br&gt;
location ~ .html$ {&lt;br&gt;
allow all;&lt;br&gt;
}&lt;br&gt;
}&lt;/p&gt;
&lt;h1 id=&#34;正则-location-与编辑顺序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#正则-location-与编辑顺序&#34;&gt;#&lt;/a&gt; 正则 location 与编辑顺序&lt;/h1&gt;
&lt;p&gt;location 的指令与编辑顺序无关，这句话不全对。对于普通 location 指令，匹配规则是：最大前缀匹配（与顺序无关），如果恰好是严格精确匹配结果或者加有前缀 “^~” 或 “ = ”（符号 “ = ” 只能严格匹配，不能前缀匹配），则停止搜索正则 location ；但对于正则 location 的匹配规则是：按编辑顺序逐个匹配（与顺序有关），只要匹配上，就立即停止后面的搜索。&lt;/p&gt;
&lt;p&gt;server &lt;ruby&gt;
       listen       9090;
       server_name  localhost;
       location ~ \.html$ {
           allow all; 
       }  
       location ~ &lt;rp&gt;【&lt;/rp&gt;&lt;rt&gt;/prefix/.*\.html$ {
           deny all;  
       &lt;/rt&gt;&lt;rp&gt;】&lt;/rp&gt;&lt;/ruby&gt;&lt;br&gt;
}&lt;br&gt;
server &lt;ruby&gt;
       listen       9090;
       server_name  localhost;
       location ~ &lt;rp&gt;【&lt;/rp&gt;&lt;rt&gt;/prefix/.*\.html$ {
           deny all;  
       &lt;/rt&gt;&lt;rp&gt;】&lt;/rp&gt;&lt;/ruby&gt;&lt;br&gt;
location ~ .html$ {&lt;br&gt;
allow all;&lt;br&gt;
}&lt;br&gt;
}&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://my.durtime.top/posts/55bce094/</guid>
            <title>Docker实用篇</title>
            <link>https://my.durtime.top/posts/55bce094/</link>
            <category>教程</category>
            <category>Docker</category>
            <pubDate>Thu, 28 May 2020 22:31:46 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;docker实用篇&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#docker实用篇&#34;&gt;#&lt;/a&gt; Docker 实用篇&lt;/h1&gt;
&lt;h1 id=&#34;0学习目标&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#0学习目标&#34;&gt;#&lt;/a&gt; 0. 学习目标&lt;/h1&gt;
&lt;h1 id=&#34;1初识docker&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1初识docker&#34;&gt;#&lt;/a&gt; 1. 初识 Docker&lt;/h1&gt;
&lt;h2 id=&#34;11什么是docker&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#11什么是docker&#34;&gt;#&lt;/a&gt; 1.1. 什么是 Docker&lt;/h2&gt;
&lt;p&gt;微服务虽然具备各种各样的优势，但服务的拆分通用给部署带来了很大的麻烦。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分布式系统中，依赖的组件非常多，不同组件之间部署时往往会产生一些冲突。&lt;/li&gt;
&lt;li&gt;在数百上千台服务中重复部署，环境不一定一致，会遇到各种问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;111应用部署的环境问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#111应用部署的环境问题&#34;&gt;#&lt;/a&gt; 1.1.1. 应用部署的环境问题&lt;/h3&gt;
&lt;p&gt;大型项目组件较多，运行环境也较为复杂，部署时会碰到一些问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;依赖关系复杂，容易出现兼容性问题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开发、测试、生产环境有差异&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210731141907366.png&#34; alt=&#34;image-20210731141907366&#34;&gt;&lt;/p&gt;
&lt;p&gt;例如一个项目中，部署时需要依赖于 node.js、Redis、RabbitMQ、MySQL 等，这些服务部署时所需要的函数库、依赖项各不相同，甚至会有冲突。给部署带来了极大的困难。&lt;/p&gt;
&lt;h3 id=&#34;112docker解决依赖兼容问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#112docker解决依赖兼容问题&#34;&gt;#&lt;/a&gt; 1.1.2.Docker 解决依赖兼容问题&lt;/h3&gt;
&lt;p&gt;而 Docker 确巧妙的解决了这些问题，Docker 是如何实现的呢？&lt;/p&gt;
&lt;p&gt;Docker 为了解决依赖的兼容问题的，采用了两个手段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;将应用的 Libs（函数库）、Deps（依赖）、配置与应用一起打包&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将每个应用放到一个隔离&lt;strong&gt;容器&lt;/strong&gt;去运行，避免互相干扰&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210731142219735.png&#34; alt=&#34;image-20210731142219735&#34;&gt;&lt;/p&gt;
&lt;p&gt;这样打包好的应用包中，既包含应用本身，也保护应用所需要的 Libs、Deps，无需再操作系统上安装这些，自然就不存在不同应用之间的兼容问题了。&lt;/p&gt;
&lt;p&gt;虽然解决了不同应用的兼容问题，但是开发、测试等环境会存在差异，操作系统版本也会有差异，怎么解决这些问题呢？&lt;/p&gt;
&lt;h3 id=&#34;113docker解决操作系统环境差异&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#113docker解决操作系统环境差异&#34;&gt;#&lt;/a&gt; 1.1.3.Docker 解决操作系统环境差异&lt;/h3&gt;
&lt;p&gt;要解决不同操作系统环境差异问题，必须先了解操作系统结构。以一个 Ubuntu 操作系统为例，结构如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210731143401460.png&#34; alt=&#34;image-20210731143401460&#34;&gt;&lt;/p&gt;
&lt;p&gt;结构包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计算机硬件：例如 CPU、内存、磁盘等&lt;/li&gt;
&lt;li&gt;系统内核：所有 Linux 发行版的内核都是 Linux，例如 CentOS、Ubuntu、Fedora 等。内核可以与计算机硬件交互，对外提供&lt;strong&gt;内核指令&lt;/strong&gt;，用于操作计算机硬件。&lt;/li&gt;
&lt;li&gt;系统应用：操作系统本身提供的应用、函数库。这些函数库是对内核指令的封装，使用更加方便。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用于计算机交互的流程如下：&lt;/p&gt;
&lt;p&gt;1）应用调用操作系统应用（函数库），实现各种功能&lt;/p&gt;
&lt;p&gt;2）系统函数库是对内核指令集的封装，会调用内核指令&lt;/p&gt;
&lt;p&gt;3）内核指令操作计算机硬件&lt;/p&gt;
&lt;p&gt;Ubuntu 和 CentOSpringBoot 都是基于 Linux 内核，无非是系统应用不同，提供的函数库有差异：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210731144304990.png&#34; alt=&#34;image-20210731144304990&#34;&gt;&lt;/p&gt;
&lt;p&gt;此时，如果将一个 Ubuntu 版本的 MySQL 应用安装到 CentOS 系统，MySQL 在调用 Ubuntu 函数库时，会发现找不到或者不匹配，就会报错了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210731144458680.png&#34; alt=&#34;image-20210731144458680&#34;&gt;&lt;/p&gt;
&lt;p&gt;Docker 如何解决不同系统环境的问题？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker 将用户程序与所需要调用的系统 (比如 Ubuntu) 函数库一起打包&lt;/li&gt;
&lt;li&gt;Docker 运行到不同操作系统时，直接基于打包的函数库，借助于操作系统的 Linux 内核来运行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210731144820638.png&#34; alt=&#34;image-20210731144820638&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;114小结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#114小结&#34;&gt;#&lt;/a&gt; 1.1.4. 小结&lt;/h3&gt;
&lt;p&gt;Docker 如何解决大型项目依赖关系复杂，不同组件依赖的兼容性问题？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker 允许开发中将应用、依赖、函数库、配置一起&lt;strong&gt;打包&lt;/strong&gt;，形成可移植镜像&lt;/li&gt;
&lt;li&gt;Docker 应用运行在容器中，使用沙箱机制，相互&lt;strong&gt;隔离&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker 如何解决开发、测试、生产环境有差异的问题？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker 镜像中包含完整运行环境，包括系统函数库，仅依赖系统的 Linux 内核，因此可以在任意 Linux 操作系统上运行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker 是一个快速交付应用、运行应用的技术，具备下列优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以将程序及其依赖、运行环境一起打包为一个镜像，可以迁移到任意 Linux 操作系统&lt;/li&gt;
&lt;li&gt;运行时利用沙箱机制形成隔离容器，各个应用互不干扰&lt;/li&gt;
&lt;li&gt;启动、移除都可以通过一行命令完成，方便快捷&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;12docker和虚拟机的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#12docker和虚拟机的区别&#34;&gt;#&lt;/a&gt; 1.2.Docker 和虚拟机的区别&lt;/h2&gt;
&lt;p&gt;Docker 可以让一个应用在任何操作系统中非常方便的运行。而以前我们接触的虚拟机，也能在一个操作系统中，运行另外一个操作系统，保护系统中的任何应用。&lt;/p&gt;
&lt;p&gt;两者有什么差异呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;虚拟机&lt;/strong&gt;（virtual machine）是在操作系统中&lt;strong&gt;模拟&lt;/strong&gt;硬件设备，然后运行另一个操作系统，比如在 Windows 系统里面运行 Ubuntu 系统，这样就可以运行任意的 Ubuntu 应用了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt; 仅仅是封装函数库，并没有模拟完整的操作系统，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210731145914960.png&#34; alt=&#34;image-20210731145914960&#34;&gt;&lt;/p&gt;
&lt;p&gt;对比来看：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210731152243765.png&#34; alt=&#34;image-20210731152243765&#34;&gt;&lt;/p&gt;
&lt;p&gt;小结：&lt;/p&gt;
&lt;p&gt;Docker 和虚拟机的差异：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;docker 是一个系统进程；虚拟机是在操作系统中的操作系统&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;docker 体积小、启动速度快、性能好；虚拟机体积大、启动速度慢、性能一般&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;13docker架构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#13docker架构&#34;&gt;#&lt;/a&gt; 1.3.Docker 架构&lt;/h2&gt;
&lt;h3 id=&#34;131镜像和容器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#131镜像和容器&#34;&gt;#&lt;/a&gt; 1.3.1. 镜像和容器&lt;/h3&gt;
&lt;p&gt;Docker 中有几个重要的概念：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;镜像（Image）&lt;/strong&gt;：Docker 将应用程序及其所需的依赖、函数库、环境、配置等文件打包在一起，称为镜像。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;容器（Container）&lt;/strong&gt;：镜像中的应用程序运行后形成的进程就是&lt;strong&gt;容器&lt;/strong&gt;，只是 Docker 会给容器进程做隔离，对外不可见。&lt;/p&gt;
&lt;p&gt;一切应用最终都是代码组成，都是硬盘中的一个个的字节形成的&lt;strong&gt;文件&lt;/strong&gt;。只有运行时，才会加载到内存，形成进程。&lt;/p&gt;
&lt;p&gt;而&lt;strong&gt;镜像&lt;/strong&gt;，就是把一个应用在硬盘上的文件、及其运行环境、部分系统函数库文件一起打包形成的文件包。这个文件包是只读的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;容器&lt;/strong&gt;呢，就是将这些文件中编写的程序、函数加载到内存中允许，形成进程，只不过要隔离起来。因此一个镜像可以启动多次，形成多个容器进程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210731153059464.png&#34; alt=&#34;image-20210731153059464&#34;&gt;&lt;/p&gt;
&lt;p&gt;例如你下载了一个 QQ，如果我们将 QQ 在磁盘上的运行&lt;strong&gt;文件&lt;/strong&gt;及其运行的操作系统依赖打包，形成 QQ 镜像。然后你可以启动多次，双开、甚至三开 QQ，跟多个妹子聊天。&lt;/p&gt;
&lt;h3 id=&#34;132dockerhub&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#132dockerhub&#34;&gt;#&lt;/a&gt; 1.3.2.DockerHub&lt;/h3&gt;
&lt;p&gt;开源应用程序非常多，打包这些应用往往是重复的劳动。为了避免这些重复劳动，人们就会将自己打包的应用镜像，例如 Redis、MySQL 镜像放到网络上，共享使用，就像 GitHub 的代码共享一样。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DockerHub：DockerHub 是一个官方的 Docker 镜像的托管平台。这样的平台称为 Docker Registry。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;国内也有类似于 DockerHub 的公开服务，比如 &lt;a href=&#34;https://c.163yun.com/hub&#34;&gt;网易云镜像服务&lt;/a&gt;、&lt;a href=&#34;https://cr.console.aliyun.com/&#34;&gt;阿里云镜像库&lt;/a&gt;等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们一方面可以将自己的镜像共享到 DockerHub，另一方面也可以从 DockerHub 拉取镜像：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210731153743354.png&#34; alt=&#34;image-20210731153743354&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;133docker架构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#133docker架构&#34;&gt;#&lt;/a&gt; 1.3.3.Docker 架构&lt;/h3&gt;
&lt;p&gt;我们要使用 Docker 来操作镜像、容器，就必须要安装 Docker。&lt;/p&gt;
&lt;p&gt;Docker 是一个 CS 架构的程序，由两部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;服务端 (server)：Docker 守护进程，负责处理 Docker 指令，管理镜像、容器等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;客户端 (client)：通过命令或 RestAPI 向 Docker 服务端发送指令。可以在本地或远程向服务端发送指令。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210731154257653.png&#34; alt=&#34;image-20210731154257653&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;134小结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#134小结&#34;&gt;#&lt;/a&gt; 1.3.4. 小结&lt;/h3&gt;
&lt;p&gt;镜像：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将应用程序及其依赖、环境、配置打包在一起&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;容器：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;镜像运行起来就是容器，一个镜像可以运行多个容器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker 结构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;服务端：接收命令或远程请求，操作镜像或容器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;客户端：发送命令或者请求到 Docker 服务端&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DockerHub：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个镜像托管的服务器，类似的还有阿里云镜像服务，统称为 DockerRegistry&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;14安装docker&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#14安装docker&#34;&gt;#&lt;/a&gt; 1.4. 安装 Docker&lt;/h2&gt;
&lt;p&gt;企业部署一般都是采用 Linux 操作系统，而其中又数 CentOS 发行版占比最多，因此我们在 CentOS 下安装 Docker。参考课前资料中的文档：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210731155002425.png&#34; alt=&#34;image-20210731155002425&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;2docker的基本操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2docker的基本操作&#34;&gt;#&lt;/a&gt; 2.Docker 的基本操作&lt;/h1&gt;
&lt;h2 id=&#34;21镜像操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#21镜像操作&#34;&gt;#&lt;/a&gt; 2.1. 镜像操作&lt;/h2&gt;
&lt;h3 id=&#34;211镜像名称&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#211镜像名称&#34;&gt;#&lt;/a&gt; 2.1.1. 镜像名称&lt;/h3&gt;
&lt;p&gt;首先来看下镜像的名称组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;镜名称一般分两部分组成：[repository]:[tag]。&lt;/li&gt;
&lt;li&gt;在没有指定 tag 时，默认是 latest，代表最新版本的镜像&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210731155141362.png&#34; alt=&#34;image-20210731155141362&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里的 mysql 就是 repository，5.7 就是 tag，合一起就是镜像名称，代表 5.7 版本的 MySQL 镜像。&lt;/p&gt;
&lt;h3 id=&#34;212镜像命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#212镜像命令&#34;&gt;#&lt;/a&gt; 2.1.2. 镜像命令&lt;/h3&gt;
&lt;p&gt;常见的镜像操作命令如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210731155649535.png&#34; alt=&#34;image-20210731155649535&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;213案例1-拉取-查看镜像&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#213案例1-拉取-查看镜像&#34;&gt;#&lt;/a&gt; 2.1.3. 案例 1 - 拉取、查看镜像&lt;/h3&gt;
&lt;p&gt;需求：从 DockerHub 中拉取一个 nginx 镜像并查看&lt;/p&gt;
&lt;p&gt;1）首先去镜像仓库搜索 nginx 镜像，比如&lt;a href=&#34;https://hub.docker.com/&#34;&gt; DockerHub&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210731155844368.png&#34; alt=&#34;image-20210731155844368&#34;&gt;&lt;/p&gt;
&lt;p&gt;2）根据查看到的镜像名称，拉取自己需要的镜像，通过命令：docker pull nginx&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210731155856199.png&#34; alt=&#34;image-20210731155856199&#34;&gt;&lt;/p&gt;
&lt;p&gt;3）通过命令：docker images 查看拉取到的镜像&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210731155903037.png&#34; alt=&#34;image-20210731155903037&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;214案例2-保存-导入镜像&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#214案例2-保存-导入镜像&#34;&gt;#&lt;/a&gt; 2.1.4. 案例 2 - 保存、导入镜像&lt;/h3&gt;
&lt;p&gt;需求：利用 docker save 将 nginx 镜像导出磁盘，然后再通过 load 加载回来&lt;/p&gt;
&lt;p&gt;1）利用 docker xx --help 命令查看 docker save 和 docker load 的语法&lt;/p&gt;
&lt;p&gt;例如，查看 save 命令用法，可以输入命令：&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker save --&lt;span class=&#34;built_in&#34;&gt;help&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210731161104732.png&#34; alt=&#34;image-20210731161104732&#34;&gt;&lt;/p&gt;
&lt;p&gt;命令格式：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker save -o [保存的目标文件名称] [镜像名称]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2）使用 docker save 导出镜像到磁盘&lt;/p&gt;
&lt;p&gt;运行命令：&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker save -o nginx.tar nginx:latest&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;结果如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210731161354344.png&#34; alt=&#34;image-20210731161354344&#34;&gt;&lt;/p&gt;
&lt;p&gt;3）使用 docker load 加载镜像&lt;/p&gt;
&lt;p&gt;先删除本地的 nginx 镜像：&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker rmi nginx:latest&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后运行命令，加载本地文件：&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker load -i nginx.tar&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210731161746245.png&#34; alt=&#34;image-20210731161746245&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;215练习&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#215练习&#34;&gt;#&lt;/a&gt; 2.1.5. 练习&lt;/h3&gt;
&lt;p&gt;需求：去 DockerHub 搜索并拉取一个 Redis 镜像&lt;/p&gt;
&lt;p&gt;目标：&lt;/p&gt;
&lt;p&gt;1）去 DockerHub 搜索 Redis 镜像&lt;/p&gt;
&lt;p&gt;2）查看 Redis 镜像的名称和版本&lt;/p&gt;
&lt;p&gt;3）利用 docker pull 命令拉取镜像&lt;/p&gt;
&lt;p&gt;4）利用 docker save 命令将 redis:latest 打包为一个 redis.tar 包&lt;/p&gt;
&lt;p&gt;5）利用 docker rmi 删除本地的 redis:latest&lt;/p&gt;
&lt;p&gt;6）利用 docker load 重新加载 redis.tar 文件&lt;/p&gt;
&lt;h2 id=&#34;22容器操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#22容器操作&#34;&gt;#&lt;/a&gt; 2.2. 容器操作&lt;/h2&gt;
&lt;h3 id=&#34;221容器相关命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#221容器相关命令&#34;&gt;#&lt;/a&gt; 2.2.1. 容器相关命令&lt;/h3&gt;
&lt;p&gt;容器操作的命令如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210731161950495.png&#34; alt=&#34;image-20210731161950495&#34;&gt;&lt;/p&gt;
&lt;p&gt;容器保护三个状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行：进程正常运行&lt;/li&gt;
&lt;li&gt;暂停：进程暂停，CPU 不再运行，并不释放内存&lt;/li&gt;
&lt;li&gt;停止：进程终止，回收进程占用的内存、CPU 等资源&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;docker run：创建并运行一个容器，处于运行状态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;docker pause：让一个运行的容器暂停&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;docker unpause：让一个容器从暂停状态恢复运行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;docker stop：停止一个运行的容器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;docker start：让一个停止的容器再次运行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;docker rm：删除一个容器&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;222案例-创建并运行一个容器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#222案例-创建并运行一个容器&#34;&gt;#&lt;/a&gt; 2.2.2. 案例 - 创建并运行一个容器&lt;/h3&gt;
&lt;p&gt;创建并运行 nginx 容器的命令：&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker run --name containerName -p 80:80 -d nginx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;命令解读：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;docker run ：创建并运行一个容器&lt;/li&gt;
&lt;li&gt;–name : 给容器起一个名字，比如叫做 mn&lt;/li&gt;
&lt;li&gt;-p ：将宿主机端口与容器端口映射，冒号左侧是宿主机端口，右侧是容器端口&lt;/li&gt;
&lt;li&gt;-d：后台运行容器&lt;/li&gt;
&lt;li&gt;nginx：镜像名称，例如 nginx&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里的 &lt;code&gt;-p&lt;/code&gt;  参数，是将容器端口映射到宿主机端口。&lt;/p&gt;
&lt;p&gt;默认情况下，容器是隔离环境，我们直接访问宿主机的 80 端口，肯定访问不到容器中的 nginx。&lt;/p&gt;
&lt;p&gt;现在，将容器的 80 与宿主机的 80 关联起来，当我们访问宿主机的 80 端口时，就会被映射到容器的 80，这样就能访问到 nginx 了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210731163255863.png&#34; alt=&#34;image-20210731163255863&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;223案例-进入容器修改文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#223案例-进入容器修改文件&#34;&gt;#&lt;/a&gt; 2.2.3. 案例 - 进入容器，修改文件&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;需求&lt;/strong&gt;：进入 Nginx 容器，修改 HTML 文件内容，添加 “传智教育欢迎您”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;：进入容器要用到 docker exec 命令。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;1）进入容器。进入我们刚刚创建的 nginx 容器的命令为：&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker &lt;span class=&#34;built_in&#34;&gt;exec&lt;/span&gt; -it mn bash&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;命令解读：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;docker exec ：进入容器内部，执行一个命令&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;-it : 给当前进入的容器创建一个标准输入、输出终端，允许我们与容器交互&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mn ：要进入的容器的名称&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;bash：进入容器后执行的命令，bash 是一个 linux 终端交互命令&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2）进入 nginx 的 HTML 所在目录 /usr/share/nginx/html&lt;/p&gt;
&lt;p&gt;容器内部会模拟一个独立的 Linux 文件系统，看起来如同一个 linux 服务器一样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210731164159811.png&#34; alt=&#34;image-20210731164159811&#34;&gt;&lt;/p&gt;
&lt;p&gt;nginx 的环境、配置、运行文件全部都在这个文件系统中，包括我们要修改的 html 文件。&lt;/p&gt;
&lt;p&gt;查看 DockerHub 网站中的 nginx 页面，可以知道 nginx 的 html 目录位置在 &lt;code&gt;/usr/share/nginx/html&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们执行命令，进入该目录：&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;cd&lt;/span&gt; /usr/share/nginx/html&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;查看目录下文件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210731164455818.png&#34; alt=&#34;image-20210731164455818&#34;&gt;&lt;/p&gt;
&lt;p&gt;3）修改 index.html 的内容&lt;/p&gt;
&lt;p&gt;容器内没有 vi 命令，无法直接修改，我们用下面的命令来修改：&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sed -i -e &lt;span class=&#34;string&#34;&gt;&amp;#x27;s#Welcome to nginx#传智教育欢迎您#g&amp;#x27;&lt;/span&gt; -e &lt;span class=&#34;string&#34;&gt;&amp;#x27;s#&amp;lt;head&amp;gt;#&amp;lt;head&amp;gt;&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;#g&amp;#x27;&lt;/span&gt; index.html&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在浏览器访问自己的虚拟机地址，例如我的是：&lt;a href=&#34;http://192.168.150.101&#34;&gt;http://192.168.150.101&lt;/a&gt;，即可看到结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210731164717604.png&#34; alt=&#34;image-20210731164717604&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;224小结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#224小结&#34;&gt;#&lt;/a&gt; 2.2.4. 小结&lt;/h3&gt;
&lt;p&gt;docker run 命令的常见参数有哪些？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;–name：指定容器名称&lt;/li&gt;
&lt;li&gt;-p：指定端口映射&lt;/li&gt;
&lt;li&gt;-d：让容器后台运行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查看容器日志的命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;docker logs&lt;/li&gt;
&lt;li&gt;添加 -f 参数可以持续查看日志&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查看容器状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;docker ps&lt;/li&gt;
&lt;li&gt;docker ps -a 查看所有容器，包括已经停止的&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;23数据卷容器数据管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#23数据卷容器数据管理&#34;&gt;#&lt;/a&gt; 2.3. 数据卷（容器数据管理）&lt;/h2&gt;
&lt;p&gt;在之前的 nginx 案例中，修改 nginx 的 html 页面时，需要进入 nginx 内部。并且因为没有编辑器，修改文件也很麻烦。&lt;/p&gt;
&lt;p&gt;这就是因为容器与数据（容器内文件）耦合带来的后果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210731172440275.png&#34; alt=&#34;image-20210731172440275&#34;&gt;&lt;/p&gt;
&lt;p&gt;要解决这个问题，必须将数据与容器解耦，这就要用到数据卷了。&lt;/p&gt;
&lt;h3 id=&#34;231什么是数据卷&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#231什么是数据卷&#34;&gt;#&lt;/a&gt; 2.3.1. 什么是数据卷&lt;/h3&gt;
&lt;p&gt;** 数据卷（volume）** 是一个虚拟目录，指向宿主机文件系统中的某个目录。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210731173541846.png&#34; alt=&#34;image-20210731173541846&#34;&gt;&lt;/p&gt;
&lt;p&gt;一旦完成数据卷挂载，对容器的一切操作都会作用在数据卷对应的宿主机目录了。&lt;/p&gt;
&lt;p&gt;这样，我们操作宿主机的 /var/lib/docker/volumes/html 目录，就等于操作容器内的 /usr/share/nginx/html 目录了&lt;/p&gt;
&lt;h3 id=&#34;232数据集操作命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#232数据集操作命令&#34;&gt;#&lt;/a&gt; 2.3.2. 数据集操作命令&lt;/h3&gt;
&lt;p&gt;数据卷操作的基本语法如下：&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker volume [COMMAND]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;docker volume 命令是数据卷操作，根据命令后跟随的 command 来确定下一步的操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create 创建一个 volume&lt;/li&gt;
&lt;li&gt;inspect 显示一个或多个 volume 的信息&lt;/li&gt;
&lt;li&gt;ls 列出所有的 volume&lt;/li&gt;
&lt;li&gt;prune 删除未使用的 volume&lt;/li&gt;
&lt;li&gt;rm 删除一个或多个指定的 volume&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;233创建和查看数据卷&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#233创建和查看数据卷&#34;&gt;#&lt;/a&gt; 2.3.3. 创建和查看数据卷&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;需求&lt;/strong&gt;：创建一个数据卷，并查看数据卷在宿主机的目录位置&lt;/p&gt;
&lt;p&gt;① 创建数据卷&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker volume create html&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;② 查看所有数据&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker volume &lt;span class=&#34;built_in&#34;&gt;ls&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210731173746910.png&#34; alt=&#34;image-20210731173746910&#34;&gt;&lt;/p&gt;
&lt;p&gt;③ 查看数据卷详细信息卷&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker volume inspect html&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210731173809877.png&#34; alt=&#34;image-20210731173809877&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到，我们创建的 html 这个数据卷关联的宿主机目录为 &lt;code&gt;/var/lib/docker/volumes/html/_data&lt;/code&gt;  目录。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;小结&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;数据卷的作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将容器与数据分离，解耦合，方便操作容器内数据，保证数据安全&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据卷操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;docker volume create：创建数据卷&lt;/li&gt;
&lt;li&gt;docker volume ls：查看所有数据卷&lt;/li&gt;
&lt;li&gt;docker volume inspect：查看数据卷详细信息，包括关联的宿主机目录位置&lt;/li&gt;
&lt;li&gt;docker volume rm：删除指定数据卷&lt;/li&gt;
&lt;li&gt;docker volume prune：删除所有未使用的数据卷&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;234挂载数据卷&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#234挂载数据卷&#34;&gt;#&lt;/a&gt; 2.3.4. 挂载数据卷&lt;/h3&gt;
&lt;p&gt;我们在创建容器时，可以通过 -v 参数来挂载一个数据卷到某个容器内目录，命令格式如下：&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker run \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  --name mn \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  -v html:/root/html \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  -p 8080:80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  nginx \&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里的 - v 就是挂载数据卷的命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-v html:/root/htm&lt;/code&gt;  ：把 html 数据卷挂载到容器内的 /root/html 这个目录中&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;235案例-给nginx挂载数据卷&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#235案例-给nginx挂载数据卷&#34;&gt;#&lt;/a&gt; 2.3.5. 案例 - 给 nginx 挂载数据卷&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;需求&lt;/strong&gt;：创建一个 nginx 容器，修改容器内的 html 目录内的 index.html 内容&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分析&lt;/strong&gt;：上个案例中，我们进入 nginx 容器内部，已经知道 nginx 的 html 目录所在位置 /usr/share/nginx/html ，我们需要把这个目录挂载到 html 这个数据卷上，方便操作其中的内容。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;：运行容器时使用 -v 参数挂载数据卷&lt;/p&gt;
&lt;p&gt;步骤：&lt;/p&gt;
&lt;p&gt;① 创建容器并挂载数据卷到容器内的 HTML 目录&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker run --name mn -v html:/usr/share/nginx/html -p 80:80 -d nginx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;② 进入 html 数据卷所在位置，并修改 HTML 内容&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 查看html数据卷的位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker volume inspect html&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 进入该目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;cd&lt;/span&gt; /var/lib/docker/volumes/html/_data&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 修改文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;vi index.html&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;236案例-给mysql挂载本地目录&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#236案例-给mysql挂载本地目录&#34;&gt;#&lt;/a&gt; 2.3.6. 案例 - 给 MySQL 挂载本地目录&lt;/h3&gt;
&lt;p&gt;容器不仅仅可以挂载数据卷，也可以直接挂载到宿主机目录上。关联关系如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;带数据卷模式：宿主机目录 --&amp;gt; 数据卷 —&amp;gt; 容器内目录&lt;/li&gt;
&lt;li&gt;直接挂载模式：宿主机目录 —&amp;gt; 容器内目录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210731175155453.png&#34; alt=&#34;image-20210731175155453&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语法&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;目录挂载与数据卷挂载的语法是类似的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-v [宿主机目录]:[容器内目录]&lt;/li&gt;
&lt;li&gt;-v [宿主机文件]:[容器内文件]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;需求&lt;/strong&gt;：创建并运行一个 MySQL 容器，将宿主机目录直接挂载到容器&lt;/p&gt;
&lt;p&gt;实现思路如下：&lt;/p&gt;
&lt;p&gt;1）在将课前资料中的 mysql.tar 文件上传到虚拟机，通过 load 命令加载为镜像&lt;/p&gt;
&lt;p&gt;2）创建目录 /tmp/mysql/data&lt;/p&gt;
&lt;p&gt;3）创建目录 /tmp/mysql/conf，将课前资料提供的 hmy.cnf 文件上传到 /tmp/mysql/conf&lt;/p&gt;
&lt;p&gt;4）去 DockerHub 查阅资料，创建并运行 MySQL 容器，要求：&lt;/p&gt;
&lt;p&gt;① 挂载 /tmp/mysql/data 到 mysql 容器内数据存储目录&lt;/p&gt;
&lt;p&gt;② 挂载 /tmp/mysql/conf/hmy.cnf 到 mysql 容器的配置文件&lt;/p&gt;
&lt;p&gt;③ 设置 MySQL 密码&lt;/p&gt;
&lt;h3 id=&#34;237小结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#237小结&#34;&gt;#&lt;/a&gt; 2.3.7. 小结&lt;/h3&gt;
&lt;p&gt;docker run 的命令中通过 -v 参数挂载文件或目录到容器中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-v volume 名称：容器内目录&lt;/li&gt;
&lt;li&gt;-v 宿主机文件：容器内文&lt;/li&gt;
&lt;li&gt;-v 宿主机目录：容器内目录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据卷挂载与目录直接挂载的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据卷挂载耦合度低，由 docker 来管理目录，但是目录较深，不好找&lt;/li&gt;
&lt;li&gt;目录挂载耦合度高，需要我们自己管理目录，不过目录容易寻找查看&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;3dockerfile自定义镜像&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3dockerfile自定义镜像&#34;&gt;#&lt;/a&gt; 3.Dockerfile 自定义镜像&lt;/h1&gt;
&lt;p&gt;常见的镜像在 DockerHub 就能找到，但是我们自己写的项目就必须自己构建镜像了。&lt;/p&gt;
&lt;p&gt;而要自定义镜像，就必须先了解镜像的结构才行。&lt;/p&gt;
&lt;h2 id=&#34;31镜像结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#31镜像结构&#34;&gt;#&lt;/a&gt; 3.1. 镜像结构&lt;/h2&gt;
&lt;p&gt;镜像是将应用程序及其需要的系统函数库、环境、配置、依赖打包而成。&lt;/p&gt;
&lt;p&gt;我们以 MySQL 为例，来看看镜像的组成结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210731175806273.png&#34; alt=&#34;image-20210731175806273&#34;&gt;&lt;/p&gt;
&lt;p&gt;简单来说，镜像就是在系统函数库、运行环境基础上，添加应用程序文件、配置文件、依赖文件等组合，然后编写好启动脚本打包在一起形成的文件。&lt;/p&gt;
&lt;p&gt;我们要构建镜像，其实就是实现上述打包的过程。&lt;/p&gt;
&lt;h2 id=&#34;32dockerfile语法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#32dockerfile语法&#34;&gt;#&lt;/a&gt; 3.2.Dockerfile 语法&lt;/h2&gt;
&lt;p&gt;构建自定义的镜像时，并不需要一个个文件去拷贝，打包。&lt;/p&gt;
&lt;p&gt;我们只需要告诉 Docker，我们的镜像的组成，需要哪些 BaseImage、需要拷贝什么文件、需要安装什么依赖、启动脚本是什么，将来 Docker 会帮助我们构建镜像。&lt;/p&gt;
&lt;p&gt;而描述上述信息的文件就是 Dockerfile 文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt; 就是一个文本文件，其中包含一个个的&lt;strong&gt;指令 (Instruction)&lt;/strong&gt;，用指令来说明要执行什么操作来构建镜像。每一个指令都会形成一层 Layer。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210731180321133.png&#34; alt=&#34;image-20210731180321133&#34;&gt;&lt;/p&gt;
&lt;p&gt;更新详细语法说明，请参考官网文档： &lt;a href=&#34;https://docs.docker.com/engine/reference/builder&#34;&gt;https://docs.docker.com/engine/reference/builder&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;33构建java项目&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#33构建java项目&#34;&gt;#&lt;/a&gt; 3.3. 构建 Java 项目&lt;/h2&gt;
&lt;h3 id=&#34;331基于ubuntu构建java项目&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#331基于ubuntu构建java项目&#34;&gt;#&lt;/a&gt; 3.3.1. 基于 Ubuntu 构建 Java 项目&lt;/h3&gt;
&lt;p&gt;需求：基于 Ubuntu 镜像构建一个新镜像，运行一个 java 项目&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;步骤 1：新建一个空文件夹 docker-demo&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210801101207444.png&#34; alt=&#34;image-20210801101207444&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;步骤 2：拷贝课前资料中的 docker-demo.jar 文件到 docker-demo 这个目录&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210801101314816.png&#34; alt=&#34;image-20210801101314816&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;步骤 3：拷贝课前资料中的 jdk8.tar.gz 文件到 docker-demo 这个目录&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210801101410200.png&#34; alt=&#34;image-20210801101410200&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;步骤 4：拷贝课前资料提供的 Dockerfile 到 docker-demo 这个目录&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210801101455590.png&#34; alt=&#34;image-20210801101455590&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中的内容如下：&lt;/p&gt;
&lt;figure class=&#34;highlight dockerfile&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 指定基础镜像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;FROM&lt;/span&gt; ubuntu:&lt;span class=&#34;number&#34;&gt;16.04&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 配置环境变量，JDK的安装目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;ENV&lt;/span&gt; JAVA_DIR=/usr/local&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 拷贝jdk和java项目的包&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;COPY&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt; ./jdk8.tar.gz &lt;span class=&#34;variable&#34;&gt;$JAVA_DIR&lt;/span&gt;/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;COPY&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt; ./docker-demo.jar /tmp/app.jar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 安装JDK&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;RUN&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt; &lt;span class=&#34;built_in&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$JAVA_DIR&lt;/span&gt; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-bash&#34;&gt; &amp;amp;&amp;amp; tar -xf ./jdk8.tar.gz \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-bash&#34;&gt; &amp;amp;&amp;amp; &lt;span class=&#34;built_in&#34;&gt;mv&lt;/span&gt; ./jdk1.8.0_144 ./java8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 配置环境变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;ENV&lt;/span&gt; JAVA_HOME=$JAVA_DIR/java8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;ENV&lt;/span&gt; PATH=$PATH:$JAVA_HOME/bin&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 暴露端口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;EXPOSE&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;8090&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 入口，java项目的启动命令&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;ENTRYPOINT&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt; java -jar /tmp/app.jar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;步骤 5：进入 docker-demo&lt;/p&gt;
&lt;p&gt;将准备好的 docker-demo 上传到虚拟机任意目录，然后进入 docker-demo 目录下&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;步骤 6：运行命令：&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker build -t javaweb:1.0 .&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后访问 &lt;a href=&#34;http://192.168.150.101:8090/hello/count%EF%BC%8C%E5%85%B6%E4%B8%AD%E7%9A%84ip%E6%94%B9%E6%88%90%E4%BD%A0%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BAip&#34;&gt;http://192.168.150.101:8090/hello/count，其中的 ip 改成你的虚拟机 ip&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;332基于java8构建java项目&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#332基于java8构建java项目&#34;&gt;#&lt;/a&gt; 3.3.2. 基于 java8 构建 Java 项目&lt;/h3&gt;
&lt;p&gt;虽然我们可以基于 Ubuntu 基础镜像，添加任意自己需要的安装包，构建镜像，但是却比较麻烦。所以大多数情况下，我们都可以在一些安装了部分软件的基础镜像上做改造。&lt;/p&gt;
&lt;p&gt;例如，构建 java 项目的镜像，可以在已经准备了 JDK 的基础镜像基础上构建。&lt;/p&gt;
&lt;p&gt;需求：基于 java:8-alpine 镜像，将一个 Java 项目构建为镜像&lt;/p&gt;
&lt;p&gt;实现思路如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;① 新建一个空的目录，然后在目录中新建一个文件，命名为 Dockerfile&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;② 拷贝课前资料提供的 docker-demo.jar 到这个目录中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;③ 编写 Dockerfile 文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a ）基于 java:8-alpine 作为基础镜像&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;b ）将 app.jar 拷贝到镜像中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;c ）暴露端口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;d ）编写入口 ENTRYPOINT&lt;/p&gt;
&lt;p&gt;内容如下：&lt;/p&gt;
&lt;figure class=&#34;highlight dockerfile&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;FROM&lt;/span&gt; java:&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;-alpine&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;COPY&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt; ./app.jar /tmp/app.jar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;EXPOSE&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;8090&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;ENTRYPOINT&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt; java -jar /tmp/app.jar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;④ 使用 docker build 命令构建镜像&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;⑤ 使用 docker run 创建容器并运行&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;34小结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#34小结&#34;&gt;#&lt;/a&gt; 3.4. 小结&lt;/h2&gt;
&lt;p&gt;小结：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Dockerfile 的本质是一个文件，通过指令描述镜像的构建过程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dockerfile 的第一行必须是 FROM，从一个基础镜像来构建&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基础镜像可以是基本操作系统，如 Ubuntu。也可以是其他人制作好的镜像，例如：java:8-alpine&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;4docker-compose&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4docker-compose&#34;&gt;#&lt;/a&gt; 4.Docker-Compose&lt;/h1&gt;
&lt;p&gt;Docker Compose 可以基于 Compose 文件帮我们快速的部署分布式应用，而无需手动一个个创建和运行容器！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210731180921742.png&#34; alt=&#34;image-20210731180921742&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;41初识dockercompose&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#41初识dockercompose&#34;&gt;#&lt;/a&gt; 4.1. 初识 DockerCompose&lt;/h2&gt;
&lt;p&gt;Compose 文件是一个文本文件，通过指令定义集群中的每个容器如何运行。格式如下：&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;version&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;3.8&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; services&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  mysql&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    image&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; mysql&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;5.7&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.25&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    environment&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     MYSQL_ROOT_PASSWORD&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;123&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    volumes&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     - &lt;span class=&#34;string&#34;&gt;&amp;quot;/tmp/mysql/data:/var/lib/mysql&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     - &lt;span class=&#34;string&#34;&gt;&amp;quot;/tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  web&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    build&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; .&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ports&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     - &lt;span class=&#34;string&#34;&gt;&amp;quot;8090:8090&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的 Compose 文件就描述一个项目，其中包含两个容器：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mysql：一个基于 &lt;code&gt;mysql:5.7.25&lt;/code&gt;  镜像构建的容器，并且挂载了两个目录&lt;/li&gt;
&lt;li&gt;web：一个基于 &lt;code&gt;docker build&lt;/code&gt;  临时构建的镜像容器，映射端口时 8090&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DockerCompose 的详细语法参考官网：&lt;a href=&#34;https://docs.docker.com/compose/compose-file/&#34;&gt;https://docs.docker.com/compose/compose-file/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其实 DockerCompose 文件可以看做是将多个 docker run 命令写到一个文件，只是语法稍有差异。&lt;/p&gt;
&lt;h2 id=&#34;42安装dockercompose&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#42安装dockercompose&#34;&gt;#&lt;/a&gt; 4.2. 安装 DockerCompose&lt;/h2&gt;
&lt;p&gt;参考课前资料&lt;/p&gt;
&lt;h2 id=&#34;43部署微服务集群&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#43部署微服务集群&#34;&gt;#&lt;/a&gt; 4.3. 部署微服务集群&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;需求&lt;/strong&gt;：将之前学习的 cloud-demo 微服务集群利用 DockerCompose 部署&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实现思路&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;① 查看课前资料提供的 cloud-demo 文件夹，里面已经编写好了 docker-compose 文件&lt;/p&gt;
&lt;p&gt;② 修改自己的 cloud-demo 项目，将数据库、nacos 地址都命名为 docker-compose 中的服务名&lt;/p&gt;
&lt;p&gt;③ 使用 maven 打包工具，将项目中的每个微服务都打包为 app.jar&lt;/p&gt;
&lt;p&gt;④ 将打包好的 app.jar 拷贝到 cloud-demo 中的每一个对应的子目录中&lt;/p&gt;
&lt;p&gt;⑤ 将 cloud-demo 上传至虚拟机，利用 docker-compose up -d 来部署&lt;/p&gt;
&lt;h3 id=&#34;431compose文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#431compose文件&#34;&gt;#&lt;/a&gt; 4.3.1.compose 文件&lt;/h3&gt;
&lt;p&gt;查看课前资料提供的 cloud-demo 文件夹，里面已经编写好了 docker-compose 文件，而且每个微服务都准备了一个独立的目录：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210731181341330.png&#34; alt=&#34;image-20210731181341330&#34;&gt;&lt;/p&gt;
&lt;p&gt;内容如下：&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;version:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;3.2&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;services:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;nacos:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;image:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;nacos/nacos-server&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;environment:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;MODE:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;standalone&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;ports:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;8848:8848&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;mysql:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;image:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;mysql:5.7.25&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;environment:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;MYSQL_ROOT_PASSWORD:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;123&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;volumes:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;$PWD/mysql/data:/var/lib/mysql&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;$PWD/mysql/conf:/etc/mysql/conf.d/&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;userservice:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;build:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;./user-service&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;orderservice:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;build:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;./order-service&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;gateway:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;build:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;./gateway&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;ports:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;10010:10010&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到，其中包含 5 个 service 服务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nacos&lt;/code&gt; ：作为注册中心和配置中心
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;image: nacos/nacos-server&lt;/code&gt; ： 基于 nacos/nacos-server 镜像构建&lt;/li&gt;
&lt;li&gt;&lt;code&gt;environment&lt;/code&gt; ：环境变量
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MODE: standalone&lt;/code&gt; ：单点模式启动&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ports&lt;/code&gt; ：端口映射，这里暴露了 8848 端口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mysql&lt;/code&gt; ：数据库
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;image: mysql:5.7.25&lt;/code&gt; ：镜像版本是 mysql:5.7.25&lt;/li&gt;
&lt;li&gt;&lt;code&gt;environment&lt;/code&gt; ：环境变量
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MYSQL_ROOT_PASSWORD: 123&lt;/code&gt; ：设置数据库 root 账户的密码为 123&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;volumes&lt;/code&gt; ：数据卷挂载，这里挂载了 mysql 的 data、conf 目录，其中有我提前准备好的数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;userservice&lt;/code&gt; 、 &lt;code&gt;orderservice&lt;/code&gt; 、 &lt;code&gt;gateway&lt;/code&gt; ：都是基于 Dockerfile 临时构建的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查看 mysql 目录，可以看到其中已经准备好了 cloud_order、cloud_user 表：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210801095205034.png&#34; alt=&#34;image-20210801095205034&#34;&gt;&lt;/p&gt;
&lt;p&gt;查看微服务目录，可以看到都包含 Dockerfile 文件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210801095320586.png&#34; alt=&#34;image-20210801095320586&#34;&gt;&lt;/p&gt;
&lt;p&gt;内容如下：&lt;/p&gt;
&lt;figure class=&#34;highlight dockerfile&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;FROM&lt;/span&gt; java:&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;-alpine&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;COPY&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt; ./app.jar /tmp/app.jar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;ENTRYPOINT&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt; java -jar /tmp/app.jar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;432修改微服务配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#432修改微服务配置&#34;&gt;#&lt;/a&gt; 4.3.2. 修改微服务配置&lt;/h3&gt;
&lt;p&gt;因为微服务将来要部署为 docker 容器，而容器之间互联不是通过 IP 地址，而是通过容器名。这里我们将 order-service、user-service、gateway 服务的 mysql、nacos 地址都修改为基于容器名的访问。&lt;/p&gt;
&lt;p&gt;如下所示：&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;spring:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;datasource:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;url:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;jdbc:mysql://mysql:3306/cloud_order?useSSL=false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;username:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;root&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;password:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;123&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;driver-class-name:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;com.mysql.jdbc.Driver&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;application:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;orderservice&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;cloud:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;nacos:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;server-addr:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;nacos:8848&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;# nacos服务地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;433打包&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#433打包&#34;&gt;#&lt;/a&gt; 4.3.3. 打包&lt;/h3&gt;
&lt;p&gt;接下来需要将我们的每个微服务都打包。因为之前查看到 Dockerfile 中的 jar 包名称都是 app.jar，因此我们的每个微服务都需要用这个名称。&lt;/p&gt;
&lt;p&gt;可以通过修改 pom.xml 中的打包名称来实现，每个微服务都需要修改：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;build&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;&amp;lt;!-- 服务打包的最终名称 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;finalName&lt;/span&gt;&amp;gt;&lt;/span&gt;app&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;finalName&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;plugins&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;plugins&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;build&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;打包后：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210801095951030.png&#34; alt=&#34;image-20210801095951030&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;434拷贝jar包到部署目录&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#434拷贝jar包到部署目录&#34;&gt;#&lt;/a&gt; 4.3.4. 拷贝 jar 包到部署目录&lt;/h3&gt;
&lt;p&gt;编译打包好的 app.jar 文件，需要放到 Dockerfile 的同级目录中。注意：每个微服务的 app.jar 放到与服务名称对应的目录，别搞错了。&lt;/p&gt;
&lt;p&gt;user-service：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210801100201253.png&#34; alt=&#34;image-20210801100201253&#34;&gt;&lt;/p&gt;
&lt;p&gt;order-service：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210801100231495.png&#34; alt=&#34;image-20210801100231495&#34;&gt;&lt;/p&gt;
&lt;p&gt;gateway：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210801100308102.png&#34; alt=&#34;image-20210801100308102&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;435部署&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#435部署&#34;&gt;#&lt;/a&gt; 4.3.5. 部署&lt;/h3&gt;
&lt;p&gt;最后，我们需要将文件整个 cloud-demo 文件夹上传到虚拟机中，理由 DockerCompose 部署。&lt;/p&gt;
&lt;p&gt;上传到任意目录：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/image-20210801100955653.png&#34; alt=&#34;image-20210801100955653&#34;&gt;&lt;/p&gt;
&lt;p&gt;部署：&lt;/p&gt;
&lt;p&gt;进入 cloud-demo 目录，然后运行下面的命令：&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker-compose up -d&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;5docker镜像仓库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5docker镜像仓库&#34;&gt;#&lt;/a&gt; 5.Docker 镜像仓库&lt;/h1&gt;
&lt;h2 id=&#34;51搭建私有镜像仓库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#51搭建私有镜像仓库&#34;&gt;#&lt;/a&gt; 5.1. 搭建私有镜像仓库&lt;/h2&gt;
&lt;p&gt;参考课前资料《&lt;a href=&#34;http://xn--CentOS7Docker-hm0y4670c.md&#34;&gt;CentOS7 安装 Docker.md&lt;/a&gt;》&lt;/p&gt;
&lt;h2 id=&#34;52推送-拉取镜像&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#52推送-拉取镜像&#34;&gt;#&lt;/a&gt; 5.2. 推送、拉取镜像&lt;/h2&gt;
&lt;p&gt;推送镜像到私有镜像服务必须先 tag，步骤如下：&lt;/p&gt;
&lt;p&gt;① 重新 tag 本地镜像，名称前缀为私有仓库的地址：192.168.150.101:8080/&lt;/p&gt;
 &lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker tag nginx:latest 192.168.150.101:8080/nginx:1.0 &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;② 推送镜像&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker push 192.168.150.101:8080/nginx:1.0 &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;③ 拉取镜像&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker pull 192.168.150.101:8080/nginx:1.0 &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
    </channel>
</rss>
