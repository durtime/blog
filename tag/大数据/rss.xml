<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Durtime • Posts by &#34;大数据&#34; tag</title>
        <link>https://durtime.github.io/blog</link>
        <description>The aroma of black tea no longer exists</description>
        <language>zh-CN</language>
        <pubDate>Sun, 12 Mar 2023 09:34:41 +0800</pubDate>
        <lastBuildDate>Sun, 12 Mar 2023 09:34:41 +0800</lastBuildDate>
        <category>教程</category>
        <category>Hexo</category>
        <category>主題</category>
        <category>butterfly</category>
        <category>Aplayer</category>
        <category>Docker</category>
        <category>Markdown语法</category>
        <category>推荐</category>
        <category>算法</category>
        <category>大数据</category>
        <category>nginx</category>
        <category>ssh</category>
        <category>hadoop</category>
        <category>Ip</category>
        <category>运维</category>
        <item>
            <guid isPermalink="true">https://durtime.github.io/blog/posts/1fd8e8b9/</guid>
            <title>推荐业务(一)</title>
            <link>https://durtime.github.io/blog/posts/1fd8e8b9/</link>
            <category>推荐</category>
            <category>大数据</category>
            <category>hadoop</category>
            <pubDate>Sun, 12 Mar 2023 09:34:41 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;1-离线画像业务&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-离线画像业务&#34;&gt;#&lt;/a&gt; 1 离线画像业务&lt;/h1&gt;
&lt;p&gt;画像的构建作为推荐系统非常重要的环节，画像可以作为整个产品的推荐或者营销重要依据。需要通过各种方法来构建。&lt;/p&gt;
&lt;p&gt;文章内容标签化：内容标签化，根据内容定性的制定一系列标签，这些标签可以是描述性标签。针对于文章就是文章相关的内容词语。&lt;/p&gt;
&lt;p&gt;文章的关键词、主题词&lt;/p&gt;
&lt;h1 id=&#34;2-textrank算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-textrank算法&#34;&gt;#&lt;/a&gt; 2 TextRank 算法&lt;/h1&gt;
&lt;p&gt;TextRank 算法是一种基于图的用于关键词抽取和文档摘要的排序算法，由谷歌的网页重要性排序算法 PageRank 算法改进而来，它利用一篇文档内部的词语间的共现信息 (语义) 便可以抽取关键词，它能够从一个给定的文本中抽取出该文本的关键词、关键词组，并使用抽取式的自动文摘方法抽取出该文本的关键句。&lt;/p&gt;
&lt;p&gt;TextRank 算法的基本思想是将文档看作一个词的网络，该网络中的链接表示词与词之间的语义关系。&lt;/p&gt;
&lt;p&gt;TextRank 算法主要包括：关键词抽取、关键短语抽取、关键句抽取。&lt;/p&gt;
&lt;p&gt;（1）关键词抽取（keyword extraction）&lt;br&gt;
关键词抽取是指从文本中确定一些能够描述文档含义的术语的过程。对关键词抽取而言，用于构建顶点集的文本单元可以是句子中的一个或多个字；根据这些字之间的关系（比如：在一个框中同时出现）构建边。根据任务的需要，可以使用语法过滤器（syntactic filters）对顶点集进行优化。语法过滤器的主要作用是将某一类或者某几类词性的字过滤出来作为顶点集。&lt;/p&gt;
&lt;p&gt;（2）关键短语抽取（keyphrase extration）&lt;br&gt;
关键词抽取结束后，我们可以得到的 N 个关键词，在原始文本中相邻的关键词构成关键短语。因此，从 get_keyphrases 函数的源码中我们可以看到，它先调用 get_keywords 抽取关键词，然后分析关键词是否存在相邻的情况，最后确定哪些是关键短语。&lt;/p&gt;
&lt;p&gt;（3）关键句抽取（sentence extraction）&lt;br&gt;
句子抽取任务主要针对的是自动摘要这个场景，将每一个 sentence 作为一个顶点，根据两个句子之间的内容重复程度来计算他们之间的 “相似度”，以这个相似度作为联系，由于不同句子之间相似度大小不一致，在这个场景下构建的是以相似度大小作为 edge 权重的有权图。&lt;/p&gt;
&lt;h1 id=&#34;3-textrank算法实现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-textrank算法实现&#34;&gt;#&lt;/a&gt; 3 TextRank 算法实现&lt;/h1&gt;
&lt;p&gt;（1）基于 Textrank4zh 的 TextRank 算法实现&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# coding=utf-8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;from textrank4zh import TextRank4Keyword, TextRank4Sentence&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import jieba.analyse&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;from snownlp import SnowNLP&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import pandas as pd&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import numpy as np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#关键词抽取&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;def keywords_extraction(text):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    tr4w = TextRank4Keyword(allow_speech_tags=[&amp;#x27;n&amp;#x27;, &amp;#x27;nr&amp;#x27;, &amp;#x27;nrfg&amp;#x27;, &amp;#x27;ns&amp;#x27;, &amp;#x27;nt&amp;#x27;, &amp;#x27;nz&amp;#x27;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # allow_speech_tags   --词性列表，用于过滤某些词性的词&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    tr4w.analyze(text=text, window=2, lower=True, vertex_source=&amp;#x27;all_filters&amp;#x27;, edge_source=&amp;#x27;no_stop_words&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                 pagerank_config=&amp;#123;&amp;#x27;alpha&amp;#x27;: 0.85, &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # text    --  文本内容，字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # window  --  窗口大小，int，用来构造单词之间的边。默认值为2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # lower   --  是否将英文文本转换为小写，默认值为False&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # vertex_source  -- 选择使用words_no_filter, words_no_stop_words, words_all_filters中的哪一个来构造pagerank对应的图中的节点&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    #                -- 默认值为`&amp;#x27;all_filters&amp;#x27;`，可选值为`&amp;#x27;no_filter&amp;#x27;, &amp;#x27;no_stop_words&amp;#x27;, &amp;#x27;all_filters&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # edge_source  -- 选择使用words_no_filter, words_no_stop_words, words_all_filters中的哪一个来构造pagerank对应的图中的节点之间的边&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    #              -- 默认值为`&amp;#x27;no_stop_words&amp;#x27;`，可选值为`&amp;#x27;no_filter&amp;#x27;, &amp;#x27;no_stop_words&amp;#x27;, &amp;#x27;all_filters&amp;#x27;`。边的构造要结合`window`参数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # pagerank_config  -- pagerank算法参数配置，阻尼系数为0.85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    keywords = tr4w.get_keywords(num=6, word_min_len=2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # num           --  返回关键词数量&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # word_min_len  --  词的最小长度，默认值为1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return keywords&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;关键短语抽取&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#关键短语抽取&#34;&gt;#&lt;/a&gt; 关键短语抽取&lt;/h1&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;def keyphrases_extraction(text):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    tr4w = TextRank4Keyword()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    tr4w.analyze(text=text, window=2, lower=True, vertex_source=&amp;#x27;all_filters&amp;#x27;, edge_source=&amp;#x27;no_stop_words&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                 pagerank_config=&amp;#123;&amp;#x27;alpha&amp;#x27;: 0.85, &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    keyphrases = tr4w.get_keyphrases(keywords_num=6, min_occur_num=1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # keywords_num    --  抽取的关键词数量&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # min_occur_num   --  关键短语在文中的最少出现次数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return keyphrases&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;关键句抽取&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#关键句抽取&#34;&gt;#&lt;/a&gt; 关键句抽取&lt;/h1&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;def keysentences_extraction(text):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    tr4s = TextRank4Sentence()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    tr4s.analyze(text, lower=True, source=&amp;#x27;all_filters&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # text    -- 文本内容，字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # lower   -- 是否将英文文本转换为小写，默认值为False&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # source  -- 选择使用words_no_filter, words_no_stop_words, words_all_filters中的哪一个来生成句子之间的相似度。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # 		  -- 默认值为`&amp;#x27;all_filters&amp;#x27;`，可选值为`&amp;#x27;no_filter&amp;#x27;, &amp;#x27;no_stop_words&amp;#x27;, &amp;#x27;all_filters&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # sim_func -- 指定计算句子相似度的函数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # 获取最重要的num个长度大于等于sentence_min_len的句子用来生成摘要&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    keysentences = tr4s.get_key_sentences(num=3, sentence_min_len=6)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return keysentences&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;def keywords_textrank(text):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    keywords = jieba.analyse.textrank(text, topK=6)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return keywords&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;if __name__ == &amp;quot;__main__&amp;quot;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    text = &amp;quot;来源：中国科学报本报讯（记者肖洁）又有一位中国科学家喜获小行星命名殊荣！4月19日下午，中国科学院国家天文台在京举行“周又元星”颁授仪式，&amp;quot; \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &amp;quot;我国天文学家、中国科学院院士周又元的弟子与后辈在欢声笑语中济济一堂。国家天文台党委书记、&amp;quot; \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &amp;quot;副台长赵刚在致辞一开始更是送上白居易的诗句：“令公桃李满天下，何须堂前更种花。”&amp;quot; \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &amp;quot;据介绍，这颗小行星由国家天文台施密特CCD小行星项目组于1997年9月26日发现于兴隆观测站，&amp;quot; \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &amp;quot;获得国际永久编号第120730号。2018年9月25日，经国家天文台申报，&amp;quot; \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &amp;quot;国际天文学联合会小天体联合会小天体命名委员会批准，国际天文学联合会《小行星通报》通知国际社会，&amp;quot; \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &amp;quot;正式将该小行星命名为“周又元星”。&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    #关键词抽取&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    keywords=keywords_extraction(text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(keywords)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    #关键短语抽取&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    keyphrases=keyphrases_extraction(text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(keyphrases)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    #关键句抽取&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    keysentences=keysentences_extraction(text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(keysentences)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行：&lt;br&gt;
&lt;img src=&#34;../assets/Snipaste_2023-02-26_13-05-12.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;（2）基于 jieba 的 TextRank 算法实现&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;if __name__ == &amp;quot;__main__&amp;quot;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    text = &amp;quot;来源：中国科学报本报讯（记者肖洁）又有一位中国科学家喜获小行星命名殊荣！4月19日下午，中国科学院国家天文台在京举行“周又元星”颁授仪式，&amp;quot; \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &amp;quot;我国天文学家、中国科学院院士周又元的弟子与后辈在欢声笑语中济济一堂。国家天文台党委书记、&amp;quot; \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &amp;quot;副台长赵刚在致辞一开始更是送上白居易的诗句：“令公桃李满天下，何须堂前更种花。”&amp;quot; \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &amp;quot;据介绍，这颗小行星由国家天文台施密特CCD小行星项目组于1997年9月26日发现于兴隆观测站，&amp;quot; \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &amp;quot;获得国际永久编号第120730号。2018年9月25日，经国家天文台申报，&amp;quot; \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &amp;quot;国际天文学联合会小天体联合会小天体命名委员会批准，国际天文学联合会《小行星通报》通知国际社会，&amp;quot; \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &amp;quot;正式将该小行星命名为“周又元星”。&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # 基于jieba的textrank算法实现&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    keywords=keywords_textrank(text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(keywords)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行：小星星，中国，命名，天文家…&lt;/p&gt;
&lt;h1 id=&#34;什么是-tf-idf-算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是-tf-idf-算法&#34;&gt;#&lt;/a&gt; 什么是 TF-IDF 算法？&lt;/h1&gt;
&lt;p&gt;TF（全称 TermFrequency），中文含义词频，简单理解就是关键词出现在网页当中的频次。&lt;/p&gt;
&lt;p&gt;IDF（全称 InverseDocumentFrequency），中文含义逆文档频率，简单来说就是该关键词出现在所有文档里面的一种数据集合。&lt;/p&gt;
&lt;p&gt;TF-IDF 用来评估字词对于文档集合中某一篇文档的重要程度。TF-IDF 的计算公式为：&lt;br&gt;
TF-IDF = 某文档中某词或字出现的次数 / 该文档的总字数或总词数 * log（全部文档的个数 /（包含该词或字的文档的篇数）+1）&lt;/p&gt;
&lt;h1 id=&#34;用户画像&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#用户画像&#34;&gt;#&lt;/a&gt; 用户画像&lt;/h1&gt;
&lt;p&gt;用户标签化：这个过程就是需要研究用户对内容的喜好程度，用户喜欢的内容即当作用户喜好的标签。&lt;/p&gt;
&lt;p&gt;在用户行为记录表中，我们所记下用户的行为在此时就发挥出重要的作用了。用户的浏览（时长 / 频率）、点击、分享 / 收藏 / 关注、其他商业化或关键信息均不同程度的代表的用户对这个内容的喜好程度。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://durtime.github.io/blog/posts/c4e7614/</guid>
            <title>Tf-idf算法</title>
            <link>https://durtime.github.io/blog/posts/c4e7614/</link>
            <category>推荐</category>
            <category>算法</category>
            <category>大数据</category>
            <pubDate>Fri, 10 Mar 2023 09:34:41 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;什么是-tf-idf-算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是-tf-idf-算法&#34;&gt;#&lt;/a&gt; 什么是 TF-IDF 算法？&lt;/h1&gt;
&lt;p&gt;TF（全称 TermFrequency），中文含义词频，简单理解就是关键词出现在网页当中的频次。&lt;/p&gt;
&lt;p&gt;IDF（全称 InverseDocumentFrequency），中文含义逆文档频率，简单来说就是该关键词出现在所有文档里面的一种数据集合。&lt;/p&gt;
&lt;p&gt;TF-IDF 用来评估字词对于文档集合中某一篇文档的重要程度。TF-IDF 的计算公式为：&lt;br&gt;
TF-IDF = 某文档中某词或字出现的次数 / 该文档的总字数或总词数 * log（全部文档的个数 /（包含该词或字的文档的篇数）+1）&lt;br&gt;
TF-IDF 的思想比较简单，但是却非常实用。然而这种方法还是存在着数据稀疏的问题，也没有考虑字的前后信息。&lt;/p&gt;
&lt;p&gt;在信息检索中，tf-idf 或 TFIDF（术语频率 – 逆文档频率的缩写）是一种数字统计，旨在反映单词对集合或语料库中的文档的重要程度。&lt;/p&gt;
&lt;p&gt;它经常被用作搜索信息检索，文本挖掘和用户建模的加权因子。tf-idf 值按比例增加一个单词出现在文档中的次数，并被包含该单词的语料库中的文档数量所抵消，这有助于调整某些单词在一般情况下更频繁出现的事实。Tf-idf 是当今最受欢迎的术语加权方案之一；数字图书馆中 83％的基于文本的推荐系统使用 tf-idf。比如关键词 “中国” 在 A 网页里面出现了 100 次，那么它的 TF 值则是 100 次（词频），假设搜索引擎所收录的所有网页里面有 1 亿网页包含 “中国” 该关键词，那么 IDF 将由 IDF 公式计算出它对应的数据值。统一来理解则是 TF 是计算自己网页内的关键词频次，而 TDF 是计算所有文档里面包含该关键词的一种概率数值。&lt;/p&gt;
&lt;p&gt;搜索引擎经常使用 tf-idf 加权方案的变体作为在给定用户查询的情况下对文档的相关性进行评分和排序的中心工具。tf-idf 可以成功地用于各种主题领域的停用词过滤，包括文本摘要和分类。&lt;/p&gt;
&lt;h1 id=&#34;tf-term-frequency-单词频率&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#tf-term-frequency-单词频率&#34;&gt;#&lt;/a&gt; TF （Term Frequency）—— “单词频率”&lt;/h1&gt;
&lt;p&gt;意思就是说，我们计算一个查询关键字中某一个单词在目标文档中出现的次数。举例说来，如果我们要查询 “Car Insurance”，那么对于每一个文档，我们都计算 “Car” 这个单词在其中出现了多少次，“Insurance” 这个单词在其中出现了多少次。这个就是 TF 的计算方法。&lt;/p&gt;
&lt;p&gt;TF 背后的隐含的假设是，查询关键字中的单词应该相对于其他单词更加重要，而查询关键字中的单词相对文档的重要程度，即查询关键字中的单词与文档的的相关度，与单词在文档中出现的次数成正比。比如，“Car” 这个单词在文档 A 里出现了 5 次，而在文档 B 里出现了 20 次，那么 TF 计算就认为文档 B 可能更相关。&lt;/p&gt;
&lt;p&gt;然而，信息检索工作者很快就发现，仅有 TF 不能比较完整地描述文档的相关度。因为语言的因素，有一些单词可能会比较自然地在很多文档中反复出现，比如英语中的 “The”、“An”、“But” 等等。这些词大多起到了链接语句的作用，是保持语言连贯不可或缺的部分。然而，如果我们要搜索 “How to Build A Car” 这个关键词，其中的 “How”、“To” 以及 “A” 都极可能在绝大多数的文档中出现，这个时候 TF 就无法帮助我们区分文档的相关度了。&lt;/p&gt;
&lt;h1 id=&#34;idfinverse-document-frequency-逆文档频率&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#idfinverse-document-frequency-逆文档频率&#34;&gt;#&lt;/a&gt; IDF（Inverse Document Frequency）—— “逆文档频率”&lt;/h1&gt;
&lt;p&gt;就在这样的情况下应运而生。这里面的思路其实很简单，那就是我们需要去 “惩罚”（Penalize）那些出现在太多文档中的单词。&lt;/p&gt;
&lt;p&gt;也就是说，真正携带 “相关” 信息的单词仅仅出现在相对比较少，有时候可能是极少数的文档里。这个信息，很容易用 “文档频率” 来计算，也就是，有多少文档涵盖了这个单词。很明显，如果有太多文档都涵盖了某个单词，这个单词也就越不重要，或者说是这个单词就越没有信息量。因此，我们需要对 TF 的值进行修正，而 IDF 的想法是用 DF（文档频率） 的倒数来进行修正。倒数的应用正好表达了这样的思想，DF 值越大越不重要。&lt;/p&gt;
&lt;p&gt;让我们从一个实例开始讲起。假定现在有一篇长文《中国的蜜蜂养殖》，我们准备用计算机提取它的关键词。&lt;/p&gt;
&lt;p&gt;一个容易想到的思路，就是找到出现次数最多的词。如果某个词很重要，它应该在这篇文章中多次出现。于是，我们进行 &amp;quot;词频&amp;quot;（Term Frequency，缩写为 TF）统计。&lt;/p&gt;
&lt;p&gt;结果你肯定猜到了，出现次数最多的词是 ----“的”、“是”、“在”---- 这一类最常用的词。它们叫做 &amp;quot;停用词&amp;quot;（stop words），表示对找到结果毫无帮助、必须过滤掉的词。&lt;/p&gt;
&lt;p&gt;假设我们把它们都过滤掉了，只考虑剩下的有实际意义的词。这样又会遇到了另一个问题，我们可能发现 &amp;quot;中国&amp;quot;、“蜜蜂”、&amp;quot;养殖&amp;quot; 这三个词的出现次数一样多。这是不是意味着，作为关键词，它们的重要性是一样的？&lt;/p&gt;
&lt;p&gt;显然不是这样。因为 &amp;quot;中国&amp;quot; 是很常见的词，相对而言，&amp;quot;蜜蜂&amp;quot; 和 &amp;quot;养殖&amp;quot; 不那么常见。如果这三个词在一篇文章的出现次数一样多，有理由认为，“蜜蜂 &amp;quot;和&amp;quot; 养殖 &amp;quot;的重要程度要大于&amp;quot; 中国”，也就是说，在关键词排序上面，&amp;quot;蜜蜂&amp;quot; 和 &amp;quot;养殖&amp;quot; 应该排在 &amp;quot;中国&amp;quot; 的前面。&lt;/p&gt;
&lt;p&gt;所以，我们需要一个重要性调整系数，衡量一个词是不是常见词。如果某个词比较少见，但是它在这篇文章中多次出现，那么它很可能就反映了这篇文章的特性，正是我们所需要的关键词。&lt;/p&gt;
&lt;p&gt;用统计学语言表达，就是在词频的基础上，要对每个词分配一个 &amp;quot;重要性&amp;quot; 权重。最常见的词（“的”、“是”、“在”）给予最小的权重，较常见的词（“中国”）给予较小的权重，较少见的词（“蜜蜂”、“养殖”）给予较大的权重。这个权重叫做 &amp;quot;逆文档频率&amp;quot;（Inverse Document Frequency，缩写为 IDF），它的大小与一个词的常见程度成反比。&lt;/p&gt;
&lt;p&gt;知道了 &amp;quot;词频&amp;quot;（TF）和 &amp;quot;逆文档频率&amp;quot;（IDF）以后，将这两个值相乘，就得到了一个词的 TF-IDF 值。某个词对文章的重要性越高，它的 TF-IDF 值就越大。所以，排在最前面的几个词，就是这篇文章的关键词。&lt;/p&gt;
&lt;h1 id=&#34;算法的细节&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#算法的细节&#34;&gt;#&lt;/a&gt; 算法的细节&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;../assets/Snipaste_2023-02-26_13-21-36.png&#34; alt=&#34;算法的细节&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../assets/Snipaste_2023-02-26_13-24-00.png&#34; alt=&#34;算法的细节&#34;&gt;&lt;br&gt;
可以看到，TF-IDF 与一个词在文档中的出现次数成正比，与该词在整个语言中的出现次数成反比。所以，自动提取关键词的算法就很清楚了，就是计算出文档的每个词的 TF-IDF 值，然后按降序排列，取排在最前面的几个词。&lt;/p&gt;
&lt;p&gt;还是以《中国的蜜蜂养殖》为例，假定该文长度为 1000 个词，“中国”、“蜜蜂”、“养殖 &amp;quot;各出现 20 次，则这三个词的&amp;quot; 词频”（TF）都为 0.02。然后，搜索 Google 发现，包含 &amp;quot;的&amp;quot; 字的网页共有 250 亿张，假定这就是中文网页总数。包含 &amp;quot;中国&amp;quot; 的网页共有 62.3 亿张，包含 &amp;quot;蜜蜂&amp;quot; 的网页为 0.484 亿张，包含 &amp;quot;养殖&amp;quot; 的网页为 0.973 亿张。则它们的逆文档频率（IDF）和 TF-IDF 如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../assets/Snipaste_2023-02-26_13-24-41.png&#34; alt=&#34;算法的细节&#34;&gt;&lt;/p&gt;
&lt;p&gt;log (250 亿 /（62.3 亿 + 1）) 约等于 0.603&lt;br&gt;
 “中国” 这个词的词频怎么算的就不知道了&lt;/p&gt;
&lt;p&gt;从上表可见，&amp;quot;蜜蜂&amp;quot; 的 TF-IDF 值最高，&amp;quot;养殖&amp;quot; 其次，&amp;quot;中国&amp;quot; 最低。（如果还计算 &amp;quot;的&amp;quot; 字的 TF-IDF，那将是一个极其接近 0 的值。）所以，如果只选择一个词，&amp;quot;蜜蜂&amp;quot; 就是这篇文章的关键词。&lt;/p&gt;
&lt;p&gt;除了自动提取关键词，TF-IDF 算法还可以用于许多别的地方。比如，信息检索时，对于每个文档，都可以分别计算一组搜索词（“中国”、“蜜蜂”、“养殖”）的 TF-IDF，将它们相加，就可以得到整个文档的 TF-IDF。这个值最高的文档就是与搜索词最相关的文档。&lt;/p&gt;
&lt;p&gt;TF-IDF 算法的优点是简单快速，结果比较符合实际情况。缺点是，单纯以 &amp;quot;词频&amp;quot; 衡量一个词的重要性，不够全面，有时重要的词可能出现次数并不多。而且，这种算法无法体现词的位置信息，出现位置靠前的词与出现位置靠后的词，都被视为重要性相同，这是不正确的。（一种解决方法是，对全文的第一段和每一段的第一句话，给予较大的权重。这一点对于 SEO 特别重要）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TF-IDF 算法思想：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;TF-IDF 的核心思想是通过该算法进行有效的计算网页的核心关键词。虽然语义分析以及中文分词能够简单的计算出页面的关键词主题，但是由于互联网内容信息重复度较大，同一个内容单纯从分词角度来讲是不足以满足搜索引擎针对网页的内容是否更加符合用户的需求。而 TF-IDF 则可以用过算法公式来计算用户搜索词与网页之间的相似度。&lt;/p&gt;
&lt;p&gt;比如网页标题 “小黑的同桌叫马天”，这里面 “的”、“叫” 在搜索引擎里面一般都称为停用词 (stop words)，也就是无意义词。而去掉这些词剩下的词则是小黑、同桌、马天。根据分词原理，这三个词都是名词，那么作为用户而言去看这个标题明显知道是阐述马天是网页的核心关键词，但是对于搜索引擎来说并不能深刻的理解该网页的核心关键词。对于这三个词，一般我们都有一个词的重要程度系数。从常见度来说，越常见的东西则不重要，反之越不常见越重要。那么搜索引擎是如何知道该词的常见程度呢？可以通过相关搜索结果数来计算关键词的重要度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TF-IDF 算法应用：&lt;/strong&gt;&lt;br&gt;
关于 TF-IDF 的算法实战应用，最常见的方式则是利用 TF-IDF 算法的计算方式来进行定位网页的核心词，从而网站大量提升关键词排名。首先我们要理解真正原创文章的含义，真正的内容原创有两种，一种是网页内容与总语料库文档不重合，另一种则是关键词与该关键词的相关结果文档不重合。而 TF-IDF 最佳的运用方式则是可以采用换汤不换药的操作方式来进行关键词排名。比如优化一个关键词 “山药的功效与作用”，那么我们可以去抄袭一篇 “人参的功效与作用” 的文章，并且替换网页里面的所有人参关键词，尽管这篇文章在人参里面是重复性很高的文章。但是在山药的功效与作用里面它就是独一无二的。并且刻意增加山药文章里面的 TF 值，让搜索引擎认定该网页的核心关键词。&lt;/p&gt;
&lt;p&gt;镜像站专门干这事！&lt;/p&gt;
&lt;p&gt;网站镜像是通过 TF-IDF 算法应用的经典案例，内容全部抄袭，网页标题（title）与文章标题不同，目的就是用来提升网页的点击率。并且文章标题我们可以发现互博国际该关键词是一个由多个词组成的词组，通过分词符号可以让互博国际变成一个关键词（词组形成关键词）。并且在网页内容里面，自然的分布关键词的频次（TF），从而达到关键词的强调性，即使内容在其他文章里面出现，但是在互博国际里面，该内容则是独一无二的原创（不重合）。为了提升网页的点击率，我们可以将网页的标题（title）写的更加规范，这样排名一旦上来，还有利于用户的点击，从而提升网页关键词的排名更佳状态。&lt;/p&gt;
&lt;p&gt;以上参考：SEO 算法篇，TFIDF 算法讲解及在 SEO 中的利用&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码&lt;/strong&gt; 看看就行（没必要会写，会复制粘贴即可）&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;from sklearn.feature_extraction.text import TfidfVectorizer&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;tfidf_vec = TfidfVectorizer()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# stop words自定义停用词表，为列表List类型&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# token_pattern过滤规则，正则表达式，如r&amp;quot;(?u)bw+b&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# max_df=0.5，代表一个单词在 50% 的文档中都出现过了，那么它只携带了非常少的信息，因此就不作为分词统计&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;documents = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#x27;this is the bayes document&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#x27;this is the second second document&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#x27;and the third one&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#x27;is this the document&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;tfidf_matrix = tfidf_vec.fit_transform(documents)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 拟合模型，并返回文本矩阵  表示了每个单词在每个文档中的 TF-IDF 值&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(&amp;#x27;输出每个单词在每个文档中的 TF-IDF 值，向量里的顺序是按照词语的 id 顺序来的:&amp;#x27;, &amp;#x27;\n&amp;#x27;, tfidf_matrix.toarray())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(&amp;#x27;不重复的词:&amp;#x27;, tfidf_vec.get_feature_names())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(&amp;#x27;输出每个单词对应的 id 值:&amp;#x27;, tfidf_vec.vocabulary_)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(&amp;#x27;返回idf值:&amp;#x27;, tfidf_vec.idf_)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(&amp;#x27;返回停用词表:&amp;#x27;, tfidf_vec.stop_words_)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://durtime.github.io/blog/posts/65ad05d8/</guid>
            <title>一梦文章推荐业务(一)</title>
            <link>https://durtime.github.io/blog/posts/65ad05d8/</link>
            <category>推荐</category>
            <category>大数据</category>
            <category>hadoop</category>
            <pubDate>Sat, 28 May 2022 22:36:02 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;1-数据库迁移需求&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-数据库迁移需求&#34;&gt;#&lt;/a&gt; 1 数据库迁移需求&lt;/h1&gt;
&lt;p&gt;业务 mysql 数据库中的数据，会同步到我们的 hadoop 的 hive 数据仓库中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为了避免直接连接、操作业务数据&lt;/li&gt;
&lt;li&gt;同步一份数据在集群中方便进行数据分析操作&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;hive&amp;gt; show databases;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;OK&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;default&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;profile&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;toutiao&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Time taken: 0.017 seconds, Fetched: 3 row(s)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;创建 hive 业务数据库 onedream&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;create database if not exists onedream comment &amp;quot;user,news information of onedream mysql&amp;quot; location &amp;#x27;/user/hive/warehouse/onedream.db/&amp;#x27;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;2-sqoop导入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-sqoop导入&#34;&gt;#&lt;/a&gt; 2 sqoop 导入&lt;/h1&gt;
&lt;p&gt;用户：基本信息，关注，收藏，搜索，订阅（设置选择喜好频道）&lt;br&gt;
文章：分类，文章&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#!/bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;array=(user_profile user_basic news_user_channel news_channel user_follow user_blacklist user_search news_collection news_article_basic news_article_content news_read news_article_statistic user_material)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for table_name in $&amp;#123;array[@]&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;do&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sqoop import \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        --connect jdbc:mysql://192.168.19.137/onedream \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        --username root \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        --password password \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        --table $table_name \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        --m 5 \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        --hive-home /root/bigdata/hive \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        --hive-import \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        --create-hive-table  \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        --hive-drop-import-delims \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        --warehouse-dir /user/hive/warehouse/onedream.db \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        --hive-table onedream.$table_name&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;done&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Mysql 导入对应 hive 类型:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;MySQL(bigint) --&amp;gt; Hive(bigint) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;MySQL(tinyint) --&amp;gt; Hive(tinyint) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;MySQL(int) --&amp;gt; Hive(int) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;MySQL(double) --&amp;gt; Hive(double) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;MySQL(bit) --&amp;gt; Hive(boolean) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;MySQL(varchar) --&amp;gt; Hive(string) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;MySQL(decimal) --&amp;gt; Hive(double) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;MySQL(date/timestamp) --&amp;gt; Hive(string)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;3-tfidf模型的训练&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-tfidf模型的训练&#34;&gt;#&lt;/a&gt; 3 TFIDF 模型的训练&lt;/h1&gt;
&lt;p&gt;步骤：&lt;br&gt;
1、读取 N 篇文章数据&lt;br&gt;
 2、文章数据进行分词处理&lt;br&gt;
 3、TFIDF 模型训练保存，spark 使用 count 与 idf 进行计算&lt;br&gt;
 4、利用模型计算 N 篇文章数据的 TFIDF 值&lt;/p&gt;
&lt;h2 id=&#34;分词&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分词&#34;&gt;#&lt;/a&gt; 分词&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# 分词&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;def segmentation(partition):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    import os&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    import re&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    import jieba&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    import jieba.analyse&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    import jieba.posseg as pseg&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    import codecs&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    abspath = &amp;quot;/root/words&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # 结巴加载用户词典&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    userDict_path = os.path.join(abspath, &amp;quot;ITKeywords.txt&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    jieba.load_userdict(userDict_path)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # 停用词文本&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    stopwords_path = os.path.join(abspath, &amp;quot;stopwords.txt&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def get_stopwords_list():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;quot;&amp;quot;&amp;quot;返回stopwords列表&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        stopwords_list = [i.strip()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                          for i in codecs.open(stopwords_path).readlines()]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return stopwords_list&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # 所有的停用词列表&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    stopwords_list = get_stopwords_list()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # 分词&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def cut_sentence(sentence):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;quot;&amp;quot;&amp;quot;对切割之后的词语进行过滤，去除停用词，保留名词，英文和自定义词库中的词，长度大于2的词&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        # print(sentence,&amp;quot;*&amp;quot;*100)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        # eg:[pair(&amp;#x27;今天&amp;#x27;, &amp;#x27;t&amp;#x27;), pair(&amp;#x27;有&amp;#x27;, &amp;#x27;d&amp;#x27;), pair(&amp;#x27;雾&amp;#x27;, &amp;#x27;n&amp;#x27;), pair(&amp;#x27;霾&amp;#x27;, &amp;#x27;g&amp;#x27;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        seg_list = pseg.lcut(sentence)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        seg_list = [i for i in seg_list if i.flag not in stopwords_list]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        filtered_words_list = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for seg in seg_list:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            # print(seg)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if len(seg.word) &amp;lt;= 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                continue&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            elif seg.flag == &amp;quot;eng&amp;quot;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                if len(seg.word) &amp;lt;= 2:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    continue&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                else:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    filtered_words_list.append(seg.word)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            elif seg.flag.startswith(&amp;quot;n&amp;quot;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                filtered_words_list.append(seg.word)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            elif seg.flag in [&amp;quot;x&amp;quot;, &amp;quot;eng&amp;quot;]:  # 是自定一个词语或者是英文单词&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                filtered_words_list.append(seg.word)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return filtered_words_list&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for row in partition:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sentence = re.sub(&amp;quot;&amp;lt;.*?&amp;gt;&amp;quot;, &amp;quot;&amp;quot;, row.sentence)    # 替换掉标签数据&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        words = cut_sentence(sentence)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        yield row.article_id, row.channel_id, words&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;训练模型，得到每个文章词的频率 Counts 结果&lt;/p&gt;
&lt;h1 id=&#34;词语与词频统计&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#词语与词频统计&#34;&gt;#&lt;/a&gt; 词语与词频统计&lt;/h1&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# 词语与词频统计&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;from pyspark.ml.feature import CountVectorizer&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 总词汇的大小，文本中必须出现的次数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cv = CountVectorizer(inputCol=&amp;quot;words&amp;quot;, outputCol=&amp;quot;countFeatures&amp;quot;, vocabSize=200*10000, minDF=1.0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 训练词频统计模型&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cv_model = cv.fit(words_df)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cv_model.write().overwrite().save(&amp;quot;hdfs://hadoop-master:9000/headlines/models/CV.model&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
    </channel>
</rss>
